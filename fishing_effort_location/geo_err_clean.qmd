---
title: "Geo errors"
date: today
output:
  html_document
format:
  html:
    toc: true
    # toc-depth: 2
    css: styles.css
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
---

## Setup
```{r setup}
#| warning: false

# setup ----
library(mapview)
library(ggplot2)
library(ggmap)

library(rnaturalearth)
library(rnaturalearthdata)

source("~/R_code_github/useful_functions_module.r")
my_paths <- set_work_dir()
current_project_dir_path <-
  file.path(my_paths$git_r, "fishing_effort_location")

```

# Get data
```{r get data}
#| warning: false

# get data ----
source(file.path(my_paths$git_r, r"(get_db_data\get_db_data.R)"))

tic("run_all_get_db_data()")
all_get_db_data_result_l <- run_all_get_db_data()
toc()
# run_all_get_db_data(): 2.27 sec elapsed (from csv)

trip_coord_info <-
  all_get_db_data_result_l[["trip_coord_info"]] |>
  remove_empty_cols()

world_coast <-
  rnaturalearth::ne_coastline(returnclass = "sf")

```

## Statistics
```{r statistics}

# statistics ----

dim(trip_coord_info)
# [1] 141350     39

coordInfo_summ <- summary(trip_coord_info) |>
  as.data.frame()

coordInfo_summ_compact <-
  coordInfo_summ |>
  select(-Var1) |>
  tidyr::pivot_wider(names_from = Var2,
              # number of vessels
              values_from = Freq,
              values_fn = list)

coordInfo_summ1 <-
  coordInfo_summ |>
  tidyr::separate(Freq, c("stat_name", "sta_val"), " *: *",
                  extra = "merge")

coordInfo_summ2 <-
  coordInfo_summ1 |>
  distinct() |>
  pivot_wider(names_from = stat_name,
              id_cols = Var2,
              values_from = sta_val) |>
  mutate(field_name = trimws(Var2),
         .before = 1,
         .keep = "unused")

names(coordInfo_summ2) <- fix_names(names(coordInfo_summ2))

coordInfo_summ2_short <-
  coordInfo_summ2 |>
  filter(is.na(mode)) |>
  select(field_name, min, max, na_s) |>
  distinct()

weird_stats <-
  coordInfo_summ2_short |>
  filter(field_name %in%
           c("FISHING_HOURS", "LATITUDE", "LONGITUDE", "TRIP_END_DATE"))

head(weird_stats)
```

## Map functions
```{r map functions}
#| outpu: false

federal_state_waters_east_shp <-
sf::read_sf(r"(~\R_files_local\my_inputs\shapefiles\FederalandStat_east\FederalandStat_east.shp)")
dim(federal_state_waters_east_shp)
# 1 7

USMaritimeLimi_ExportFeature_shp <-
sf::read_sf(r"(~\R_files_local\my_inputs\shapefiles\USMaritimeLimitsAndBoundariesSHP_orig\USMaritimeLimitsNBoundaries.shp)")

str(USMaritimeLimi_ExportFeature_shp)
# [1] 260  17

USMaritimeLimi_ExportFeature_east_shp <-
  USMaritimeLimi_ExportFeature_shp |>
  filter(REGION == "Atlantic Coast and Gulf of Mexico")

USMaritimeLimitsNBoundaries_shp <-
sf::read_sf(r"(~\R_files_local\my_inputs\shapefiles\USMaritimeLimitsAndBoundariesSHP\USMaritimeLimitsNBoundaries.shp)")

my_crs <- sf::st_crs(USMaritimeLimitsNBoundaries_shp)

lat_long_to_map <-
  function(my_df, my_title = "my_title", legend = TRUE) {
  my_df %>%
    # save info to show on the map
    dplyr::mutate(point = paste(LATITUDE, LONGITUDE, sep = ", ")) %>%
    # convert to sf
    # an sf object is a collection of simple features that includes attributes and geometries in the form of a data frame.
    sf::st_as_sf(coords = c("LONGITUDE",
                        "LATITUDE"),
                 crs = my_crs) %>%
    mapview::mapview(
      col.regions = viridisLite::turbo,
      layer.name = my_title,
      legend = legend
    ) %>% return()
}

lat_long_to_map_plot <-
  function(my_df,
           my_title = "my_title") {
    my_df_sf <-
      my_df %>%
      # save info to show on the map
      dplyr::mutate(point = paste(LATITUDE, LONGITUDE, sep = ", ")) %>%
      # convert to sf
      # an sf object is a collection of simple features that includes attributes and geometries in the form of a data frame.
      sf::st_as_sf(coords = c("LONGITUDE",
                              "LATITUDE"),
                   crs = my_crs)

    map_plot <-
      ggplot() +
      ggplot2::geom_sf(data = world_coast) +
      ggplot2::geom_sf(data = my_df_sf,
                       color = "blue") +
      ggplot2::ggtitle(my_title)

      return(map_plot)

  }

crop_by_shape <-
  function(my_sf, shape) {
    my_sf |>
      sf::st_join(shape, left = FALSE) %>%
      dplyr::mutate(
        LONGITUDE = sf::st_coordinates(.)[, 1],
        LATITUDE = sf::st_coordinates(.)[, 2]
      ) %>%
      return()
  }

```

## Map all points
```{r map all points}

trip_coord_info_map_data <-
  trip_coord_info |>
  select(LONGITUDE, LATITUDE) |>
  distinct() |>
  dplyr::filter(!is.na(LONGITUDE) | !is.na(LATITUDE)) |>
  mutate(label_lat_lon = paste(round(LATITUDE, 0),
                               round(LONGITUDE, 0)))

trip_coord_info_plot <-
  lat_long_to_map_plot(trip_coord_info_map_data,
                       "All coordinates")
trip_coord_info_plot

```

## Sign
### Positive longitude
```{r Sign}
# 1) a sign ----
## positive_long ----
positive_long <-
  trip_coord_info %>%
  filter(LONGITUDE > 0)

dim(positive_long)
#     LATITUDE        LONGITUDE
# Min.   :-87.30   Min.   :-117.25
# 1st Qu.: 26.10   1st Qu.: -83.57
# Median : 29.00   Median : -81.01
# Mean   : 28.88   Mean   : -50.88
# 3rd Qu.: 30.16   3rd Qu.: -75.85
# Max.   : 90.00   Max.   : 137.59
# NA's   :1277     NA's   :1277

positive_long_map <-
  positive_long |>
  select(LATITUDE, LONGITUDE) |>
  lat_long_to_map_plot('Positive longitude')

positive_long_map

```

### Negative latitude
```{r negative latitude}
### negative latitude ----
negative_lat <-
  trip_coord_info %>%
  filter(LATITUDE <= 0)

dim(negative_lat)
# 120

negative_lat %>% select(LATITUDE, LONGITUDE) %>% distinct()
glimpse(negative_lat)
negative_lat %>% count(LATITUDE, LONGITUDE)
# LATITUDE LONGITUDE  n
# 1 -87.30000  29.30000  2
# 2 -83.97695  29.15705 11
# 3 -76.76466  55.33196  3
# 4 -41.40274 -14.40965  2
# 5 -30.00000  86.00000 93
# 6 -27.85917 137.58650  4
# 7   0.00000   0.00000  5
```


### Negative latitude mapped
```{r Wrong sign mapped}
negative_lat_c_subset <-
  negative_lat %>%
  select(LATITUDE, LONGITUDE)

neg_lat_map <-
  lat_long_to_map_plot(negative_lat_c_subset, 'Negative latitude')

neg_lat_map

```

## Outside boundaries
```{r outside boundaries}
## 3) outside boundaries ----
big_bounding_box <- c(
   xmin = -97.79954,
   ymin = 21.521757, #Cuba
   xmax = -64.790337, #Bermuda
   ymax = 49 #Canada
 )

trip_coord_info_short_sf <-
  trip_coord_info |>
  select(LATITUDE, LONGITUDE) |>
  distinct() |>
  dplyr::filter(!is.na(LONGITUDE) | !is.na(LATITUDE)) |>
  sf::st_as_sf(
    coords = c("LONGITUDE",
               "LATITUDE"),
    crs = my_crs
  )

str(trip_coord_info_short_sf)
# [1] 116246      1

trip_coord_info_crop_big_sf <-
  sf::st_crop(trip_coord_info_short_sf,
              big_bounding_box)

dim(trip_coord_info_crop_big_sf)
# [1] 111572      1

trip_coord_info_sf_out <-
  trip_coord_info_short_sf |>
  filter(lengths(
    sf::st_intersects(trip_coord_info_short_sf, trip_coord_info_crop_big_sf)
  ) == 0)

dim(trip_coord_info_crop_big_sf)
# [1] 111572      1

dim(trip_coord_info_sf_out)
# [1] 4674    1

str(trip_coord_info_sf_out)

out_of_boxmap_plot <-
  ggplot() +
  ggplot2::geom_sf(data = world_coast) +
  ggplot2::geom_sf(data = trip_coord_info_sf_out,
                       color = "blue") +
  geom_rect(
    aes(
      xmin = big_bounding_box[["xmin"]],
      xmax = big_bounding_box[["xmax"]],
      ymin = big_bounding_box[["ymin"]],
      ymax = big_bounding_box[["ymax"]]
    ),
    color = "red",
    fill = NA
  ) +
  ggplot2::ggtitle("Points outside of the big box")

out_of_boxmap_plot

```
