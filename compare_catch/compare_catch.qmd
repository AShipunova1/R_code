---
title: "compare_catch"
date: 2023-04-03
format:
  html:
    toc: true
    css: styles.css
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
---

Compare catch in survey vs logbook
see read.me

```{r no cache setup, include=FALSE}
##| echo: false
library(zoo)
library(gridExtra)

# include auxilary functions
source("~/R_code_github/useful_functions_module.r")
my_paths <- set_work_dir()
```

```{r setup, cache=TRUE, include=FALSE}
##| echo: false

source("~/R_code_github/compare_catch/get_data.R")

```

## FHIER data

## get field names into variables
```{r logbooks_content }
# There are different formats in different available files.
# Find a column name with "itis" in it
itis_field_name <- grep("itis", names(logbooks_content), value = T)
# catch_species_itis

# Same for "vessel.*official"
vessel_id_field_name <-
  grep("vessel.*official", names(logbooks_content), value = T)
# vessel_official_nbr

```

### clean logbooks_content
```{r clean logbooks_content }

fhier_logbooks_content <-
  logbooks_content  %>%
  # create a new column
  mutate(trip_start_date_time =
    # trip start: combine a date without time, a space and a time
    paste(substr(trip_start_date, 1, 10),
    trip_start_time)) %>%
  # Same for the trip end
  mutate(trip_end_date_time = paste(substr(trip_end_date, 1, 10), trip_end_time)) %>%
  # change the new column types to a date
  change_to_dates("trip_start_date_time", "%Y-%m-%d %H%M") %>%
  change_to_dates("trip_end_date_time", "%Y-%m-%d %H%M") %>%
  # change the column type to a number
  mutate(reported_quantity = as.integer(reported_quantity))

# view
fhier_logbooks_content %>% select(starts_with("trip")) %>% str()

```

#### fix typos
```{r fix typos }

fhier_logbooks_content_date_fixed_tmp <-
  fhier_logbooks_content %>%
  # if a "trip_end_date" is before 2020 - use "notif_trip_end_date" column instead
  mutate(trip_end_date1 = ifelse(
    trip_end_date < "2020-01-01",
    notif_trip_end_date,
    trip_end_date
  ))

fhier_logbooks_content_date_fixed <-
  fhier_logbooks_content_date_fixed_tmp %>%
  # manually change the wrong value
  mutate(trip_end_date2 = ifelse(
    # find it
    grepl("1992", fhier_logbooks_content_date_fixed_tmp$trip_end_date1),
    # change it
    "2022-10-16 01:00:00",
    # don't change anything else
    trip_end_date1
  ))

```

#### use only 2022 data
```{r use only 2022 data}
fhier_logbooks_content_date_fixed %<>%
  filter(year(trip_end_date) == "2022")
```

### Add waves
```{r wave }

fhier_logbooks_content_waves <-
  fhier_logbooks_content_date_fixed %>%
  # add a new column with a trip end Month
  mutate(end_month = as.yearmon(trip_end_date2)) %>%
  # add a new column with a trip end Year
  mutate(end_year =
           year(trip_end_date2)) %>%
  # add a new column with a number for each trip end Month
  mutate(end_month_num = month(trip_end_date2)) %>%
  # add a new column with a Wave
  mutate(end_wave  = floor((end_month_num + 1) / 2))

```

#### test fhier_logbooks_content_waves
```{r test fhier_logbooks_content_waves}

# show the new columns
fhier_logbooks_content_waves %>%
  select(end_month, end_year, end_month_num, end_wave) %>%
  unique() %>%
  # sort by end_month_num
  arrange(end_month_num)

```

### FL county to region
```{r FL county to region }

# Florida counties by region (from the Internet)
fl_counties <- list(
  "SA" = c(
    "Brevard",
    "Broward",
    "Duval",
    "Flagler",
    "Indian River",
    "Martin",
    "Miami-Dade",
    "Nassau",
    "Palm Beach",
    "St. Johns",
    "St. Lucie",
    "Volusia"
  ),
  "GOM" = c(
    "Bay",
    "Charlotte",
    "Citrus",
    "Collier",
    "Dixie",
    "Escambia",
    "Franklin",
    "Gulf",
    "Hernando",
    "Hillsborough",
    "Lee",
    "Levy",
    "Manatee",
    "Monroe",
    "Okaloosa",
    "Pasco",
    "Pinellas",
    "Santa Rosa",
    "Sarasota",
    "Taylor",
    "Wakulla",
    "Walton"
  )
)

fhier_logbooks_content_waves_fl_county <-
  fhier_logbooks_content_waves %>%
  # create a new column "end_port_fl_reg" with SA, GOM or whatever else left
  mutate(
    end_port_fl_reg = case_when(
      # check in the list
      fix_names(end_port_county) %in% fix_names(fl_counties$SA) ~ "sa",
      fix_names(end_port_county) %in% fix_names(fl_counties$GOM) ~ "gom",
      # if not on the list - keep it
      .default = end_port_county
    )
  )

```

#### test fhier_logbooks_content_waves_fl_county
```{r test fhier_logbooks_content_waves_fl_county }
fhier_logbooks_content_waves_fl_county %>%
  # get FL only
  filter(end_port_state == "FL") %>%
  # sort by county
  arrange(end_port_county) %>%
  distinct() %>%
  # 37 counties
  select(end_port_fl_reg) %>%
  # what else is in the new column beside sa and gom
  filter(!(end_port_fl_reg %in% c("sa", "gom"))) %>% unique()

# NOT-SPECIFIED

```

### States to GOM or SA
```{r States to GOM or SA }

# list of states in the South Atlantic region (from the Internet)
states_sa <- data.frame(
  state_name = c(
    "Delaware",
    "District of Columbia",
    # "Florida", # exclude, we have it separated by county
    "Georgia",
    "Maryland",
    "North Carolina",
    "South Carolina",
    "Virginia",
    "West Virginia"
  )
)

```


#### get abbreviations
```{r get abbreviations}
sa_state_abb <-
  # a default R table
  state_tbl %>%
  # get only these in our list
  filter(state_name %in% tolower(states_sa$state_name)) %>%
  # get abbreviations
  select(state_abb)
```

#### add sa/gom to states
```{r add sa/gom to states}

fhier_logbooks_content_waves__sa_gom <-
  fhier_logbooks_content_waves_fl_county %>%
  # add a new column "end_port_sa_gom" with sa or gom for each state
  # use fix_name aux function to unify state names (lower case, no spaces etc.)
  mutate(end_port_sa_gom = case_when(
    # if a name is in our SA list - "sa", otherwise - "gom"
    fix_names(end_port_state) %in% fix_names(sa_state_abb$state_abb) ~ "sa",
    .default = "gom"
  )) %>%
  # go through the new column again
  # if an end port state is Florida - use the region from the previous step (column "end_port_fl_reg")
  # otherwise don't change
  mutate(end_port_sa_gom = ifelse(
    tolower(end_port_state) == "fl",
    end_port_fl_reg,
    end_port_sa_gom
  )) %>%
  # remove this column, we don't need it anymore
  select(-end_port_fl_reg)
```

#### test fhier_logbooks_content_waves__sa_gom
```{r test fhier_logbooks_content_waves__sa_gom}

fhier_logbooks_content_waves__sa_gom %>%
  # look at states and regions
  select(end_port_state, end_port_sa_gom) %>%
  unique() %>%
  glimpse()

```

### fhier quantity by species state region waves
```{r see fhier_logbooks_content_waves__sa_gom }
glimpse(fhier_logbooks_content_waves__sa_gom)
```

```{r fhier quantity by species state region waves }
fhier_catch_by_species_state_region_waves <-  
  fhier_logbooks_content_waves__sa_gom %>%
  # select only relevant columns
  select(
    catch_species_itis,
    end_port_state,
    end_port_sa_gom,
    end_year,
    end_wave,
    reported_quantity
  ) %>%
  # group by all of them but "reported_quantity"
  group_by(
    catch_species_itis,
    end_port_state,
    end_port_sa_gom,
    end_year,
    end_wave
  ) %>%
  # save a sum of reported_quantity in each group in fhier_quantity_by_4
  # remove NAs
  summarise(fhier_quantity_by_4 = sum(as.integer(reported_quantity), na.rm = TRUE)) %>%
  as.data.frame()

```

### non specified region in FHIER
```{r non specified region in FHIER }
# gom
# sa
# NOT-SPECIFIED

fhier_catch_by_species_region %>%
  filter(sa_gom == "NOT-SPECIFIED")

```

## get 10 most frequent spp. by region
```{r get 10 most frequent spp. by region}

# Look at the top most frequent FHIER spp. for each region
n_most_frequent_fhier_10_list <-
  fhier_catch_by_species_state_region_waves %>%
  # repeat for each region (SA and GOM)
  map(function(x) {x %>%
      # select ITIS and counts
      select(species_itis, fhier_catch_by_4) %>%
      group_by(species_itis) %>%
      # add a new column with a sum of counts for each spp.
      summarise(fhier_catch_by_spp = sum(fhier_catch_by_4, na.rm = TRUE)) %>%
      # sort in the discending order
      arrange(desc(fhier_catch_by_spp)) %>%
      # get the top 10
      head(10)
})
n_most_frequent_fhier_10_list$gom %>% head()
n_most_frequent_fhier_10_list$sa %>% head()

```

## MRIP data

### convert ab1 to integers
```{r convert ab1 to integers }
mrip_estimate %<>%
  mutate(ab1 = as.integer(ab1))

```

### MRIP estimate catch by species state region waves
```{r mrip estimate catch by species state region waves}

mrip_estimate_catch_by_species_state_region_waves <-
  mrip_estimate %>%
  # select the relevan columns only
  select(itis_code, new_sta, sub_reg, year, wave, ab1) %>%
  # group by all except the counts
  group_by(itis_code, new_sta, sub_reg, year, wave) %>%
  # save the sum of "ab1" for each group in "mrip_estimate_catch_by_4"
  # remove NAs
  summarise(mrip_estimate_catch_by_4 = sum(as.integer(ab1), na.rm = TRUE)) %>%
  as.data.frame()

glimpse(mrip_estimate_catch_by_species_state_region_waves)
# 'data.frame':	878 obs. of  6 variables

```

#### change columns type
```{r change clmn type}
# "year" and "wave" to numbers
mrip_estimate_catch_by_species_state_region_waves1 <-
  mrip_estimate_catch_by_species_state_region_waves %>%
  mutate(year = as.double(year)) %>%
  mutate(wave = as.double(wave))
```

#### change sa_gom mrip to char
```{r change sa_gom mrip to char}
mrip_estimate_catch_by_species_state_region_waves2 <-
  mrip_estimate_catch_by_species_state_region_waves1 %>%
  # change a 6 to "sa" and a 7 "gom", leave everything else in place
  mutate(sa_gom = case_when(sa_gom == "6" ~ "sa",
                            sa_gom == "7" ~ "gom",
                            .default = sa_gom))

```

# Compare FHIER with MRIP

## combine wave data for fhier and mrip
#### rename fields
```{r rename fields}

# common field names
wave_data_names_common <- c("species_itis",
                     "state",
                     "sa_gom",
                     "year",
                     "wave"
                    )

# specific names
wave_data_names_f <- c(wave_data_names_common, c("fhier_catch_by_4"))
wave_data_names_m <- c(wave_data_names_common, c("mrip_estimate_catch_by_4"))

# change names
names(fhier_catch_by_species_state_region_waves) <- wave_data_names_f
names(mrip_estimate_catch_by_species_state_region_waves) <- wave_data_names_m
```

#### Join FHIER and MRIP data
```{r join FHIER and MRIP data}
fhier_mrip_catch_by_species_state_region_waves <-
  full_join(fhier_catch_by_species_state_region_waves,
             mrip_estimate_catch_by_species_state_region_waves2
             )
# default Joining with `by = join_by(species_itis, state, sa_gom, year, wave)`

# look at the first 20 entries for Black see bass
fhier_mrip_catch_by_species_state_region_waves %>%
  filter(species_itis == "167687") %>% head(20)

```

##### test numbers MRIP
```{r test numbers MRIP}

mrip_estimate_catch_by_species_state_region_waves %>%
  # get one species
  filter(species_itis == "167687") %>%
  # group by region
  group_by(species_itis, sa_gom) %>%
  # sum the MRIP catch
  summarise(bass_mrip_cnt = sum(mrip_estimate_catch_by_4, na.rm = TRUE))
```

##### test numbers FHIER
```{r test numbers FHIER}

fhier_catch_by_species_state_region_waves %>%
  # get the same species
  filter(species_itis == "167687") %>%
  # group by region
  group_by(species_itis, sa_gom) %>%
  # sum the FHIER catch
  summarise(bass_fhier_cnt = sum(fhier_catch_by_4, na.rm = TRUE))
```
#### test numbers in the join
```{r test numbers in the join}

# compare the above numbers with those in the join, they should be the same
fhier_mrip_catch_by_species_state_region_waves %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis, sa_gom) %>%
  summarise(bass_fhier_cnt = sum(fhier_catch_by_4, na.rm = TRUE))

fhier_mrip_catch_by_species_state_region_waves %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis, sa_gom) %>%
  summarise(bass_mrip_cnt = sum(mrip_estimate_catch_by_4, na.rm = TRUE))

```

## make a FHIER common_name df
```{r make a common_name df}

# select common names and itis in a separate data frame
fhier_common_names <-
  fhier_logbooks_content %>%
  # names()
  select(catch_species_itis, common_name) %>%
  unique()

# add column names
names(fhier_common_names) <- c("species_itis", "common_name")

```

## one plot function
```{r one plot function}

# A function to make a plot by spp.
plot_by_spp <- function(com_name, my_df, no_legend = TRUE) {
  # browser()

 one_plot <-
  my_df %>%
    # only the com name from the parameters
    filter(common_name == !!com_name) %>%
  ggplot(
         aes(x = year_wave,
             y = CATCH_CNT,
            # color by the agency and
            # make a legend if no_legend is FALSE
             fill = AGENCY)
  ) +
    # manually cange default colours
    scale_fill_manual(values = c("MRIP" = "deepskyblue", "FHIER" = "red")) +
    # columns are side by side (not stacked)
    geom_col(position = "dodge") +
    labs(title = com_name,
        # remove x and y axes titles
         x = "",
         y = ""
    ) +
   theme(
    # turn x text
      axis.text.x = element_text(angle = 45),
    # change text size
      plot.title = element_text(size = 9),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 8)
   )

  # By default the "no_legend" parameter is TRUE
  if(no_legend) {
    one_plot <- one_plot +
      theme(legend.position = "none")
  }
  return(one_plot)
}

```


## Prepare data for ploting
```{r Prepare data for ploting }

glimpse(fhier_mrip_catch_by_species_state_region_waves)
# Rows: 6,327
# Columns: 7

```

#### combine year_wave
```{r combine year_wave}

# make a new column "year_wave"
fhier_mrip_catch_by_species_state_region_waves_tmp1 <-
  mutate(fhier_mrip_catch_by_species_state_region_waves,
         year_wave = paste(year, wave, sep = "_"))

```
#### add common_names
```{r add common_names}

# Add the fhier_common_names we made earlier
fhier_mrip_catch_by_species_state_region_waves_tmp2 <-
  inner_join(fhier_mrip_catch_by_species_state_region_waves_tmp1,
           fhier_common_names,
           by = join_by(species_itis))
```

#### split by sa_gom column
```{r split by sa_gom column}

# Make separate data frames
fhier_mrip_catch_by_species_state_region_waves_list_for_plot <-
  fhier_mrip_catch_by_species_state_region_waves_tmp2 %>%
  # split by sa_gom column
    split(as.factor(fhier_mrip_catch_by_species_state_region_waves$sa_gom)) %>%
  # remove extra columns in each df
    map(
      .f = list(. %>% dplyr::select(-one_of("year", "wave", "sa_gom")
                                    )
                )
  )

glimpse(fhier_mrip_catch_by_species_state_region_waves_list_for_plot)

```

#### test numbers in the list
```{r test numbers in the list}

# For each region sum counts for one species,
# should be the same as before

# GOM
fhier_mrip_catch_by_species_state_region_waves_list_for_plot$gom %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis) %>%
  summarise(bass_fhier_cnt = sum(fhier_catch_by_4, na.rm = TRUE))

# SA
fhier_mrip_catch_by_species_state_region_waves_list_for_plot$sa %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis) %>%
  summarise(bass_fhier_cnt = sum(mrip_estimate_catch_by_4, na.rm = TRUE))

```

```{r add top ten info}

# keep only entries for spp. in the top ten list,
# separately for each region
fhier_mrip_catch_by_species_state_region_waves_list_for_plot_gom10 <-
  fhier_mrip_catch_by_species_state_region_waves_list_for_plot$gom %>%
  filter(species_itis %in% n_most_frequent_fhier_10_list$gom$species_itis)
# Rows: 217

fhier_mrip_catch_by_species_state_region_waves_list_for_plot_sa10 <-
  fhier_mrip_catch_by_species_state_region_waves_list_for_plot$sa %>%
  filter(species_itis %in% n_most_frequent_fhier_10_list$sa$species_itis)

# glimpse(fhier_mrip_catch_by_species_state_region_waves_list_for_plot_sa)
# Rows: 300

```

### test numbers in the list by sa_gom
```{r test numbers in the list by sa_gom}

# For the top 10, for each region sum separately MRIP and FHIER counts for one species,
# should be the same as before

# SA, FHIER counts
fhier_mrip_catch_by_species_state_region_waves_list_for_plot_sa10 %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis) %>%
  summarise(bass_fhier_cnt = sum(fhier_catch_by_4, na.rm = TRUE))

# GOM, FHIER counts
fhier_mrip_catch_by_species_state_region_waves_list_for_plot_gom10 %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis) %>%
  summarise(bass_fhier_cnt = sum(fhier_catch_by_4, na.rm = TRUE))

# SA, MRIP counts
fhier_mrip_catch_by_species_state_region_waves_list_for_plot_sa10 %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis) %>%
  summarise(bass_fhier_cnt = sum(mrip_estimate_catch_by_4, na.rm = TRUE))

# GOM, MRIP counts
fhier_mrip_catch_by_species_state_region_waves_list_for_plot_gom10 %>%
  filter(species_itis == "167687") %>%
  group_by(species_itis) %>%
  summarise(bass_fhier_cnt = sum(mrip_estimate_catch_by_4, na.rm = TRUE))

# numbers OK
```

## GOM plots
#### pivot_longer fhier_mrip_catch_by_species_state_region_waves_list_for_plot_gom
```{r pivot_longer}
fhier_mrip_gom_to_plot <-
  fhier_mrip_catch_by_species_state_region_waves_list_for_plot_gom10 %>%
  # change to shorter column names
  rename(c("MRIP" = "mrip_estimate_catch_by_4",
           "FHIER" = "fhier_catch_by_4")) %>%
  # reformat to a long format to have fhier and mrip data side by side
  pivot_longer(
    cols = c(MRIP,
             FHIER),
    names_to = "AGENCY",
    values_to = "CATCH_CNT"
  ) %>%
  # use only the new columns
  select(year_wave, species_itis, common_name, AGENCY, CATCH_CNT) %>%
  # remove lines where one or another agency doesn't have counts for this species
  drop_na()

glimpse(fhier_mrip_gom_to_plot)
```

### simple plot GOM
```{r gom simple plot}
# an overview plot
plot(fhier_mrip_gom_to_plot)

```
### 10 GOM plots
```{r 10 gom plots}
# plot_by_spp("BASS, BLACK SEA", fhier_mrip_gom_to_plot)

           # for each common name from the top 10
plots10 <- map(unique(fhier_mrip_gom_to_plot$common_name),
              # run the plot_by_spp with this common name as a parameter and the default value for no_legend (TRUE)
               function(x) {plot_by_spp(x, fhier_mrip_gom_to_plot)}
               )

# Title for all plots together
super_title = "GOM: The top 9 most abundant FHIER species by waves"

# separate a legend
plot_w_legend <- plot_by_spp("BASS, BLACK SEA",
                             fhier_mrip_gom_to_plot,
                             # keep the legend
                             FALSE)
# use an aux function to pull out the legend
my_legend <- legend_for_grid_arrange(plot_w_legend)

# combine all plots
grid.arrange(grobs = plots10,
             top = super_title,
             left = my_legend,
             ncol = 3)

```

## SA plots

#### pivot_longer fhier_mrip_catch_by_species_state_region_waves_list_for_plot_sa
```{r sa pivot_longer}
fhier_mrip_sa_to_plot <-
  fhier_mrip_catch_by_species_state_region_waves_list_for_plot_sa10 %>%
  # rename to shorter column names
  rename(c("MRIP" = "mrip_estimate_catch_by_4",
           "FHIER" = "fhier_catch_by_4")) %>%
  # reformat to a long format to have fhier and mrip data side by side
  pivot_longer(
    cols = c(MRIP,
             FHIER),
    names_to = "AGENCY",
    values_to = "CATCH_CNT"
  ) %>%
  # use only the new columns
  select(year_wave, species_itis, common_name, AGENCY, CATCH_CNT) %>%
  # remove lines where one or another agency doesn't have counts for this species
  drop_na()

glimpse(fhier_mrip_sa_to_plot)
```
### simple plot SA
```{r sa simple plot}
# An overview plot
plot(fhier_mrip_sa_to_plot)

```

### 10 sa plots
```{r 10 sa plots}

           # for each common name from the top 10
plots10 <- map(unique(fhier_mrip_sa_to_plot$common_name),
              # run the plot_by_spp with this common name as a parameter and the default value for no_legend (TRUE)
               function(x) {plot_by_spp(x, fhier_mrip_sa_to_plot)}
               )

# The following code is the same as before, with "SA" instead of "GOM"
super_title = "SA: The top 9 most abundant FHIER species by waves"

# separate a legend
plot_w_legend <- plot_by_spp("BASS, BLACK SEA", fhier_mrip_sa_to_plot, FALSE)
my_legend <- legend_for_grid_arrange(plot_w_legend)

grid.arrange(grobs = plots10,
             top = super_title,
             left = my_legend,
             ncol = 3)

```
