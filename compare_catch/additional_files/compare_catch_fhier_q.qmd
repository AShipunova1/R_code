---
title: "FHIER logbooks problems"
# subtitle:  "(see read.me)"
date: today
project:
  lib-dir: ..
format:
  html:
    toc: true
    # toc-depth: 2
    css: styles.css
    code-overflow: wrap
    # code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
---

```{r no cache setup, include=FALSE}
##| echo: false
library(zoo)
library(gridExtra)
library(grid)
# install.packages("viridis")
library(viridis)

# include auxilary functions ----
source("~/R_code_github/useful_functions_module.r")
my_paths <- set_work_dir()
```

```{r setup, cache=TRUE, include=FALSE}
##| echo: false
# get data

source("~/R_code_github/compare_catch/compare_catch_data_preparation.R")

# Use fhier_logbooks_content_waves__sa_gom
```

## Transmission year
```{r Transmission year}
### Transmission year ====
# (1) check the transmission year. Anything sent in 2021 we ignore, since it was a testing year for approving apps.
# ```{r Transmission year}

grep("transm", names(fhier_logbooks_content_waves__sa_gom), value = T)

logbooks_content_transmission_date_ct <-
  fhier_logbooks_content_waves__sa_gom %>%
  # convert to a date format
  dplyr::mutate(transmission_date_ct =
           as.POSIXct(transmission_date,
                      format = "%Y-%m-%d %H:%M:%S"))

#### "start" names ----
# get names with "start"
grep("start",
     names(logbooks_content_transmission_date_ct),
     value = T)

logbooks_content_dates_ct <-
  logbooks_content_transmission_date_ct %>%
  dplyr::mutate(
    trip_start_date_ct = as.POSIXct(trip_start_date, format = "%Y-%m-%d %H:%M:%S"),
    trip_end_date_ct = as.POSIXct(trip_end_date, format = "%Y-%m-%d %H:%M:%S")
  )

logbooks_content_transmission_date_ok <-
  logbooks_content_dates_ct %>%
  # wrong dates
  # dplyr::filter(
  #   trip_start_date < "2022-01-01" |
  #     trip_start_date > "2023-04-01" |
  #     trip_end_date < "2022-01-01" |
  #     trip_end_date > "2023-04-01"
  # ) %>%
  # keep only correct transmission dates
  dplyr::filter(transmission_date_ct > "2022-01-01" |
           # or NAs
           is.na(transmission_date_ct)) %>%
  # rm an extra column
  dplyr::select(-`1`)

dim(logbooks_content_dates_ct)
# [1] 320024    163

dim(logbooks_content_transmission_date_ok)
# [1] 319773    162
# without is.na dplyr::filter:
# [1] 59630   162

# names(logbooks_content_transmission_date_ok)

```

Glimpse data
```{r logbooks_content_transmission_date_ok}
# dplyr::glimpse(logbooks_content_transmission_date_ok)
```
## Check the vendor
(2) check the vendor. If it’s VMS, there’s not a lot we can do to ask the vendor to resolve but we can of course ask the auditing team to call the user for corrections. If it’s eTrips, we need to see if the vessel has our permits. Since a user can dplyr::select any vessel in eTrips, it means we sometimes were getting reports from vessels that did not have our permit and so we’re no getting our questions. These we just need to dplyr::filter out of the data. As of about 4 months ago, Yanet should be dplyr::filtering all data to exclude vessels that did not have our permit(s).

```{r Check the vendor}
## Check the vendor ----
(2) check the vendor. If it’s VMS, there’s not a lot we can do to ask the vendor to resolve but we can of course ask the auditing team to call the user for corrections. If it’s eTrips, we need to see if the vessel has our permits. Since a user can dplyr::select any vessel in eTrips, it means we sometimes were getting reports from vessels that did not have our permit and so we’re no getting our questions. These we just need to dplyr::filter out of the data. As of about 4 months ago, Yanet should be dplyr::filtering all data to exclude vessels that did not have our permit(s).


# find the field
# grep("vendor", names(logbooks_content), value = T)
# [1] "vendor_app_name" "vendor_platform"

logbooks_content %>%
  dplyr::select(starts_with("vendor")) %>%
  dplyr::filter(!grepl("vms", tolower(vendor_app_name))) %>%
  unique() %>% dplyr::glimpse()
# 9

logbooks_content_transmission_date_ok %>%
  dplyr::select(vendor_app_name) %>% unique() %>% dplyr::glimpse()
# 6

transm_before_after <- 
logbooks_content %>%
  dplyr::mutate(
    transmission_date_group =
      case_when(
        transmission_date < "2022-01-01" ~ "before Jan 2022",
        transmission_date > "2022-01-01" ~ "after Jan 2022"
      )
  ) 

transm_before_after %>% 
  dplyr::select(vendor_app_name, transmission_date, transmission_date_group) %>% 
  # dplyr::glimpse()
  dplyr::select(vendor_app_name, transmission_date_group) %>%
  unique()

# count how many in each group
transm_before_after %>% 
  dplyr::select(vendor_app_name, transmission_date_group) %>%
  dplyr::group_by(vendor_app_name, transmission_date_group) %>%
  summarise(n = n())
# transmission_date is NA for all vendors except "VMS"

logbooks_content_transmission_date_not_vms_ok <-
  logbooks_content_transmission_date_ok %>%
  dplyr::filter(!tolower(vendor_app_name) == "vms")

# dim(logbooks_content_transmission_date_not_vms_ok)
# [1] 257843    162

```
---- End of data preparation ----

## Wrong dates - VMS only
```{r logbooks_content wrong dates}
## Wrong dates ----
fhier_dates <-
  logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::select(grep("date", names(logbooks_content_transmission_date_not_vms_ok), value = T))
# all wrong dates were in "VMS"

max(fhier_dates$trip_start_date_time)
# [1] "2023-06-13 08:00:00 EDT"
min(fhier_dates$trip_start_date_time)

max(fhier_dates$trip_end_date_time)
# [1] "2023-06-13 16:00:00 EDT"
min(fhier_dates$trip_end_date_time)
# [1] "1969-08-17 12:30:00 EDT"

fhier_dates %>%
  dplyr::filter(trip_start_date_time < "2022-01-01" |
           trip_start_date_time > "2023-04-01") %>%
  head(1)
# 1 VMS

fhier_dates %>%
  dplyr::filter(trip_end_date_time < "2022-01-01" |
           trip_end_date_time > "2023-04-01")  %>%
  head()
# 34 VMS
# 0

```

### to csv
```{r logbooks_content wrong dates to csv}
### wrong dates to csv ----

# logbooks_content_transmission_date_not_vms_ok %>%
#   dplyr::filter(
#     trip_start_date_time < "2022-01-01" |
#       trip_start_date_time > "2023-04-01" |
#       trip_end_date_time < "2022-01-01" |
#       trip_end_date_time > "2023-04-01"
#   ) %>% head()
# %>%
#   write.csv(file = "fhier_logbooks_wrong_dates.csv", row.names = F)
```

## region is not SA or GOM
```{r region is not SA or GOM glimpse, attr.output='style="max-height: 100px;"'}
## region is not SA or GOM ----

logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::filter(!(end_port_sa_gom %in% c("sa", "gom"))) %>%
  dplyr::glimpse()
# Rows: 112
# Rows: 188 with VMS
```
  
### not_specified_region_states
```{r not_specified_region_states}
### not_specified_region_states ----

not_specified_region <-
  logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::filter(!(end_port_sa_gom %in% c("sa", "gom")))

not_specified_region_states <-
  not_specified_region %>%
  dplyr::select(
    vessel_official_nbr,
    trip_id,
    in_state,
    latitude,
    longitude,
    area_code,
    sub_area_code,
    distance_code,
    distance_code_name,
    local_area_code,
    state,
    state_name,
    start_port,
    start_port_name,
    start_port_county,
    start_port_state,
    end_port,
    end_port_name,
    end_port_county,
    end_port_state
  )

head(not_specified_region_states)

```
  
### Specifics
```{r Specifics}
### Specifics ----
not_specified_region_states_not_monroe <-
  not_specified_region_states %>%
  dplyr::filter(end_port_county == "NOT-SPECIFIED" &
           start_port_county != "MONROE")

not_specified_region_states_not_monroe %>%
  dplyr::select(vessel_official_nbr) %>% unique()
  # dplyr::glimpse()

not_specified_region_states_not_monroe %>%
  dplyr::select(state_name) %>% unique()
  # FLORIDA

not_specified_region_states_not_monroe %>%
  dplyr::select(end_port) %>% unique()
  # 100999

not_specified_region_states_not_monroe %>%
  dplyr::select(start_port_name) %>% unique()
# FLORIDA(STATE)

```
  
### CSV: region is not SA or GOM
```{r region is not SA or GOM to csv}
### CSV: region is not SA or GOM ----

logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::filter(state_name == 'FLORIDA') %>%
  dplyr::filter(!(end_port_sa_gom %in% c("sa", "gom"))) %>%
  # dplyr::filter(!all(is.na(.))) %>%
  #   Rows: 112
  # Columns: 159
  # dplyr::filter(complete.cases(.)) %>%
  # Rows: 0
  unique() %>%
  # dplyr::glimpse()
  write_csv(file = "~\\fhier_logbooks_no_fl_county_not_VMS.csv")
  
```


## Spp. is 0 - VMS only
```{r spp. is 0, attr.output='style="max-height: 100px;"'}

## spp. is 0 ----
logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::filter(!!sym(itis_field_name) == "0") %>%
  dplyr::glimpse()
# Rows: 0
# Rows: 89 with VMS

# grep("common", names(logbooks_content), value = T)
# common_name

logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::filter(!!sym(itis_field_name) == "0") %>%
  dplyr::select(common_name) %>% unique()
# NA

logbooks_content %>%
  dplyr::filter(!!sym(itis_field_name) == "0") %>%
  dplyr::select(trip_start_date) %>% unique()
# 70

logbooks_content_transmission_date_not_vms_ok %>%
  dplyr::filter(!!sym(itis_field_name) == "0") %>%
  dplyr::glimpse()
# A tibble: 89 × 151 with VMS
# write.csv(file = "logbooks_content_sp0.csv", row.names = F)

logbooks_content %>%
  dplyr::filter(!!sym(itis_field_name) == "0") %>%
  # head()
  dplyr::select(vessel_official_nbr) %>% unique()
```

