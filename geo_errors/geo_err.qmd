---
title: "Geo errors"
date: today
project:
  lib-dir: ..
output:
  html_document
execute:
  warning: false
  cache: true
format:
  html:
    toc: true
    toc-depth: 2
    css: style.css
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
---

# Setup

```{r no cache setup, results='hide', message=FALSE, warning=FALSE, cache=FALSE}
# setup ----
library(mapview)
library(ggplot2)
library(ggmap)
library(tigris)
tigris_use_cache = TRUE

library(rnaturalearth) #coastline
library(knitr)

source("~/R_code_github/useful_functions_module.r")
my_paths <- set_work_dir()
current_project_dir_path <- 
  # get_current_file_directory()
  file.path(my_paths$git_r, "geo_errors")

```

# Get data

```{r get data, include=FALSE}
# get data ----
# "C:\Users\anna.shipunova\Documents\R_code_github\get_db_data\get_db_data.R"
source(file.path(my_paths$git_r, r"(get_db_data\get_db_data.R)"))

tic("run_all_get_db_data()")
all_get_db_data_result_l <- run_all_get_db_data()
toc(log = TRUE, quiet = TRUE)
# run_all_get_db_data(): 2.27 sec elapsed (from csv)

trip_coord_info <-
  all_get_db_data_result_l[["trip_coord_info"]] |>
  remove_empty_cols()

world_coast <-
  rnaturalearth::ne_coastline(returnclass = "sf")
# class(world_coast)

```

# Statistics

```{r statistics}
# statistics ----

# dim(trip_coord_info)
# [1] 141350     39

# data_overview(trip_coord_info)

coordInfo_summ <- summary(trip_coord_info) |>
  as.data.frame()

coordInfo_summ_compact <-
  coordInfo_summ |>
  select(-Var1) |>
  tidyr::pivot_wider(names_from = Var2,
              # number of vessels
              values_from = Freq,
              values_fn = list)

# coordInfo_summ_compact$FISHING_HOURS

# str_split_fixed(coordInfo_summ$Freq, " *: *", 2) |> head()

coordInfo_summ1 <-
  coordInfo_summ |>
  tidyr::separate(Freq, c("stat_name", "sta_val"), " *: *",
                  extra = "merge")

# View(coordInfo_summ1)

coordInfo_summ2 <-
  coordInfo_summ1 |>
  distinct() |>
  pivot_wider(names_from = stat_name,
              id_cols = Var2,
              values_from = sta_val) |>
  # mutate_if(is.character, trimws) |>
  mutate(field_name = trimws(Var2),
         .before = 1,
         .keep = "unused")

names(coordInfo_summ2) <- fix_names(names(coordInfo_summ2))

# print_df_names(coordInfo_summ2)

coordInfo_summ2_short <-
  coordInfo_summ2 |>
  filter(is.na(mode)) |>
  select(field_name, min, max, na_s) |>
  distinct()

# View(coordInfo_summ2_short)

# coordInfo_summ2_short$field_name |> cat(sep = ", ")
# TRIP_ID, FISHING_HOURS, LATITUDE, LONGITUDE, AVG_DEPTH_IN_FATHOMS, E_DE, E_DC, DEPTH, MINIMUM_BOTTOM_DEPTH, MAXIMUM_BOTTOM_DEPTH, FISHING_GEAR_DEPTH, DAYS_AT_SEA, T_DE, T_DC, VESSEL_ID, CF_PERMIT_ID, TRIP_START_DATE, TRIP_END_DATE, ACTIVITY_TYPE, SERO_VESSEL_PERMIT

weird_stats <-
  coordInfo_summ2_short |>
  filter(field_name %in%
           c("FISHING_HOURS", "LATITUDE", "LONGITUDE", "TRIP_END_DATE"))

head(weird_stats) |> 
    kable(caption = "weird_stats")

#   field_name    min                        max                        na_s
# 1 FISHING_HOURS "0.000  "                  "4920.640  "                NA
# 2 LATITUDE      "-87.30  "                 "90.00  "                  "580  "
# 3 LONGITUDE     "-117.25  "                "137.59  "                 "580  "
# 4 TRIP_END_DATE "1969-08-17 00:00:00.00  " "2023-09-19 00:00:00.00  "  NA

```

# Prepare vendor columns

```{r prepare vendor columns}
# t_UE, E_UE
# trip_coord_info |>
#   filter(!trimws(T_UE) == trimws(E_UE)) |>
#   glimpse()
# Rows: 119,735

trip_coord_info_vendors <-
  trip_coord_info |>
  group_by(LATITUDE, LONGITUDE) |>
  # mutate(all_permits = toString(unique(TOP))) |>
  mutate(vendor_trip = toString(unique(T_UE)),
         vendor_effort = toString(unique(E_UE))) |>
  ungroup()

# trip_coord_info_vendors |>
#   select(vendor_trip, vendor_effort) |>
#   distinct() |>
#   dim()
# [1] 971   2

trip_coord_info_trip_vendors_cnt <-
  trip_coord_info_vendors |>
  select(vendor_trip) |>
  mutate(vendor_trip = trimws(tolower(vendor_trip))) |>
  add_count(vendor_trip) |>
  distinct()

# dim(trip_coord_info_trip_vendors_cnt)
# 678

trip_coord_info_trip_vendors_cnt |>
  arrange(desc(n)) |>
  head() |> 
  kable(caption = "trip_coord_info_trip_vendors_cnt")

# vesl	77275			
# vms	15160			
# ray rosher	1032			
# captgreg9982	653		

trip_coord_info_effort_vendors_cnt <-
  trip_coord_info_vendors |>
  select(vendor_effort) |>
  mutate(vendor_effort = trimws(tolower(vendor_effort))) |>
  add_count(vendor_effort) |>
  distinct()

trip_coord_info_effort_vendors_cnt |>
  arrange(desc(n)) |>
  head() |> 
  kable(caption = "trip_coord_info_effort_vendors_cnt")
# safis	119734			
# vms	15160			
# vesl	1880			
# fishizzle75	283	

#dim [1] 263   2

tic("trip_coord_info_vendors3_trip")
trip_coord_info_vendors3_trip <-
  trip_coord_info |>
  group_by(LATITUDE, LONGITUDE) |>
  mutate(vendor_trip_cat = case_when(
    trimws(tolower(T_UE)) == "vms" ~ "vms",
    trimws(tolower(T_UE)) %in% c("vesl", "bluefin") ~ "vesl",
    .default = "etrips"
  )) |>
  ungroup()
toc(log = TRUE, quiet = TRUE)

compare_trip_and_effort_vendors <-
  function() {
    tic("trip_coord_info_vendors3_trip_eff")
    trip_coord_info_vendors3_trip_eff <-
      trip_coord_info_vendors3_trip |>
      mutate(
        vendor_effort_cat = case_when(
          trimws(tolower(E_UE)) == "vms" ~ "vms",
          trimws(tolower(E_UE)) %in% c("vesl", "bluefin") ~ "vesl",
          .default = "etrips"
        )
      ) |>
      ungroup()
    toc(log = TRUE, quiet = TRUE)
    # trip_coord_info_vendors3: 160.77 sec elapsed
    # 160.77/60 = 2.6795m
    
    # View(trip_coord_info_vendors3)
    # TODO: check t_UE diff E_UE
    # View(trip_coord_info_vendors)
    
    trip_coord_info_vendors3 |>
      filter(trimws(tolower(E_UE)) == "safis") |>
      filter(!vendor_trip_cat == vendor_effort_cat) |>
      select(T_UE, E_UE, vendor_trip_cat, vendor_effort_cat) |>
      mutate(T_UE = trimws(T_UE),
             E_UE = trimws(E_UE)) |>
      distinct() |>
      kable(caption = "T_UE diff with E_UE")
  }
#   glimpse()
# VESL	  SAFIS	vesl	etrips	
# Bluefin	SAFIS	vesl	etrips


# run ones:
  # compare_trip_and_effort_vendors()
# Because E_UE has "SAFIS" for both vesl	etrips, I will use T_UE
```

# General comments

```{r general comments}
# errors in geo data ----
# 1) a sign
# 2) on land
# 3) outside boundaries
# 3a) if 28 north - see the wrong long?
# 4) wrong depth
# 5) missing coords
# filter(complete.cases(.)) %>%
# 6) area codes?
# AREA_CODE               91
# SUB_AREA_CODE           56
# DISTANCE_CODE_NAME       5
# LOCAL_AREA_CODE         46

# ===
# fathom, old English measure of length, now standardized at 6 feet (1.83 metre), which has long been used as a nautical unit of depth.

# ===
# LATITUDE      NA's   :1198
# LATITUDE        LONGITUDE
# Min.   :-87.30   Min.   :-117.25
# Max.   : 90.00   Max.   : 137.59

```

# Map functions

```{r map functions}

lat_long_to_map <-
  function(my_df, my_title = "my_title", legend = TRUE) {
  my_df %>%
    # save info to show on the map
    dplyr::mutate(point = paste(LATITUDE, LONGITUDE, sep = ", ")) %>%
    # convert to sf
    # an sf object is a collection of simple features that includes attributes and geometries in the form of a data frame.
    sf::st_as_sf(coords = c("LONGITUDE",
                        "LATITUDE"),
                 crs = my_crs) %>%
    mapview::mapview(
      col.regions = viridisLite::turbo,
      layer.name = my_title,
      legend = legend
    ) %>% return()
}

world_coast <-
  rnaturalearth::ne_coastline(returnclass = 'sf')

lat_long_to_map_plot <-
  function(my_df,
           my_title = "my_title",
           coast_map = world_coast,
           label_column = NA) {
    # browser()

    my_crs <- sf::st_crs(coast_map)
    my_df_sf <-
      my_df %>%
      # save info to show on the map
      dplyr::mutate(point = paste(LATITUDE, LONGITUDE, sep = ", ")) %>%
      # convert to sf
      # an sf object is a collection of simple features that includes attributes and geometries in the form of a data frame.
      sf::st_as_sf(coords = c("LONGITUDE",
                              "LATITUDE"),
                   crs = my_crs)

    map_plot <-
      ggplot() +
      ggplot2::geom_sf(data = coast_map) +
      ggplot2::geom_sf(data = my_df_sf,
                       color = "blue") +
      ggplot2::ggtitle(my_title)

    if (!is.na(label_column)) {
      map_plot <-
        map_plot +
        ggplot2::geom_sf_text(data = my_df_sf,
                              aes(label = !!sym(label_column)))
    }

    return(map_plot)

  }

crop_by_shape <-
  function(my_sf, shape) {
    my_sf |>
      sf::st_join(shape, left = FALSE) %>%
      dplyr::mutate(
        LONGITUDE = sf::st_coordinates(.)[, 1],
        LATITUDE = sf::st_coordinates(.)[, 2]
      ) %>%
      return()
  }

big_bounding_box <- c(
   xmin = -97.79954,
   ymin = 21.521757, #Cuba
   xmax = -64.790337, #Bermuda
   ymax = 49 #Canada
 )

red_bounding_box <-
  geom_rect(
    aes(
      xmin = big_bounding_box[["xmin"]],
      xmax = big_bounding_box[["xmax"]],
      ymin = big_bounding_box[["ymin"]],
      ymax = big_bounding_box[["ymax"]]
    ),
    color = "red",
    fill = NA
  )

```

# Map all points

```{r map all points}

trip_coord_info_map_data <-
  trip_coord_info |>
  select(LONGITUDE, LATITUDE) |>
  distinct() |>
  dplyr::filter(!is.na(LONGITUDE) | !is.na(LATITUDE)) |>
  mutate(label_lat_lon = paste(round(LATITUDE, 0),
                               round(LONGITUDE, 0)))
  # dim()
  # [1] 116246      3

trip_coord_info_plot <-
  lat_long_to_map_plot(trip_coord_info_map_data,
                       my_title = "All coordinates")
trip_coord_info_plot
```

# Count vendors

```{r count vendors}
trip_coord_info_vendors3 <-
  trip_coord_info_vendors3_trip |> 
  mutate(year_start = year(TRIP_START_DATE))

trip_coord_info_vendors3 |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  count(vendor_trip_cat) |> 
  kable(caption = "ALL: count(vendor_trip_cat)")


trip_coord_info_vendors3 |> 
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  count(vendor_trip_cat, year_start) |> 
  kable(caption = "ALL: count(vendor_trip_cat, year_start)")

# all vendors
# etrips	47731			
# vesl	77352			
# vms	16267		
```

# Sign errors

## Positive longitude

```{r Sign}
# 1) a sign ----
## positive_long ----
positive_long <-
  trip_coord_info_vendors3 %>%
  filter(LONGITUDE > 0)

# dim(positive_long)
# [1] 15418    41

#     LATITUDE        LONGITUDE
# Min.   :-87.30   Min.   :-117.25
# 1st Qu.: 26.10   1st Qu.: -83.57
# Median : 29.00   Median : -81.01
# Mean   : 28.88   Mean   : -50.88
# 3rd Qu.: 30.16   3rd Qu.: -75.85
# Max.   : 90.00   Max.   : 137.59
# NA's   :1277     NA's   :1277

positive_long_map <-
  positive_long |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  lat_long_to_map_plot(my_title = 'Positive longitude')

# label_column = "vendor_trip_cat"

positive_long_map
```

## Positive longitude, corrected
```{r Positive longitude, corrected}
positive_long_corrected_map <-
  positive_long |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  mutate(LONGITUDE = -abs(LONGITUDE)) |> 
  lat_long_to_map_plot(my_title = 'Positive longitude, corrected')

# label_column = "vendor_trip_cat"

positive_long_corrected_map +
  red_bounding_box

```

### Positive longitude table

```{r positive longitude table}
positive_long |>
    select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  count(vendor_trip_cat) |>
  distinct() |> 
  kable(caption = "positive_long: vendor_trip_cat")

# count vendor_trip_cat
# etrips	89			
# vesl	15329		

# count(vendor_trip_cat, year_start)
positive_long |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  count(vendor_trip_cat, year_start) |>
  distinct() |> 
  kable(caption = "positive_long: count(vendor_trip_cat, year_start)")
```


```{r positive longitude VESL only}
positive_longitude_report <- function() {
  
  positive_long_vesl <-
    trip_coord_info_vendors3 |>
    filter(LONGITUDE > 0) |>
    filter(vendor_trip_cat == "vesl")
  
  positive_long_vesl_map <-
    positive_long_vesl |>
    select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
    distinct() |>
    lat_long_to_map_plot(my_title = 'Positive longitude (VESL)')
  
  ggsave("positive_long_vesl_map.png",
    plot = positive_long_vesl_map)
  
  write_csv(positive_long_vesl, "positive_long_vesl.csv")
}

# positive_longitude_report()
```

## Negative latitude

```{r negative latitude}
### negative latitude ----
negative_lat <-
  trip_coord_info_vendors3 %>%
  filter(LATITUDE <= 0)

# dim(negative_lat)
# 120

negative_lat %>%
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  count(vendor_trip_cat) |>
  distinct() |> 
  kable(caption = "negative_lat: count(vendor_trip_cat)")
# etrips	2			
# vesl	26		

negative_lat %>%
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  count(vendor_trip_cat, year_start) |>
  distinct() |> 
  kable(caption = "negative_lat: count(vendor_trip_cat, year_start)")


# dim(negative_lat)
# [1] 28 41

# negative_lat %>% count(LATITUDE, LONGITUDE)
# LATITUDE LONGITUDE  n
# 1 -87.30000  29.30000  2
# 2 -83.97695  29.15705 11
# 3 -76.76466  55.33196  3
# 4 -41.40274 -14.40965  2
# 5 -30.00000  86.00000 93
# 6 -27.85917 137.58650  4
# 7   0.00000   0.00000  5
```

### Negative latitude mapped

```{r Wrong sign mapped}
negative_lat_fixed <-
  negative_lat |> 
  select(LATITUDE, LONGITUDE) |> 
  mutate(LATITUDE = abs(LATITUDE),
         LONGITUDE = -abs(LONGITUDE))

neg_lat_pos_long_fixed_map <-
  lat_long_to_map_plot(negative_lat_fixed, 'Negative latitude,  fixed') +
  red_bounding_box

neg_lat_pos_long_fixed_map
```

```{r negative latitude fixed mapped}
negative_lat_c_subset <-
  negative_lat %>%
  select(LATITUDE, LONGITUDE)

neg_lat_map <-
  lat_long_to_map_plot(negative_lat_c_subset, 'Negative latitude')

neg_lat_map

```

# Outside boundaries

```{r outside boundaries}
## 3) outside boundaries ----

trip_coord_info_vendors3_short <-
  trip_coord_info_vendors3 |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  distinct() |>
  dplyr::filter(!is.na(LONGITUDE) | !is.na(LATITUDE))

my_crs <- sf::st_crs(world_coast)
trip_coord_info_short_sf <-
  trip_coord_info_vendors3_short |>
  sf::st_as_sf(coords = c("LONGITUDE",
                          "LATITUDE"),
               crs = my_crs)

# dim(trip_coord_info_short_sf)
# [1] 116246      1
# [1] 116251      2 w vendor_trip_cat
# [1] 117259      3

trip_coord_info_crop_big_sf <-
  sf::st_crop(trip_coord_info_short_sf,
              big_bounding_box)

# dim(trip_coord_info_crop_big_sf)
# [1] 111572      1
# [1] 111576      2

trip_coord_info_sf_out <-
  trip_coord_info_short_sf |>
  filter(lengths(
    sf::st_intersects(trip_coord_info_short_sf, trip_coord_info_crop_big_sf)
  ) == 0)

# dim(trip_coord_info_crop_big_sf)
# [1] 111572      1
# [1] 111576      2 with vendor

# dim(trip_coord_info_sf_out)
# [1] 4674    1
# [1] 4675    2 with vendor

# str(trip_coord_info_sf_out)

out_of_boxmap_plot <-
  ggplot() +
  ggplot2::geom_sf(data = world_coast) +
  ggplot2::geom_sf(data = trip_coord_info_sf_out,
                       color = "blue") +
  red_bounding_box +
  ggplot2::ggtitle("Points outside of the big box")

out_of_boxmap_plot

# str(out_of_boxmap_plot)
# rectangular_big_box_view <- mapview::viewExtent(trip_coord_info_crop_big_sf)
#
# mapview::mapview(trip_coord_info_sf_out) +
#   rectangular_big_box_view

```

## Out of box table

```{r Out of box table}
trip_coord_info_sf_out |>
  sf::st_drop_geometry() |>
  count(vendor_trip_cat, year_start) |> 
  kable(caption = "Out of box: count(vendor_trip_cat, year_start)")

# etrips	151			
# vesl	4524		

# negative_lat %>%
#   select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
#   count(vendor_trip_cat) |>
#   distinct()

```

# Weird FISHING_HOURS

```{r Weird FISHING_HOURS}
trip_coord_info_vendors3 |>
  select(TRIP_ID, FISHING_HOURS, year_start, vendor_trip_cat) |>
  distinct() |>
  dplyr::filter((FISHING_HOURS < 1) | (FISHING_HOURS > (7 * 24))) |>
  mutate(
    fishing_hours_cat =
      case_when(
        FISHING_HOURS < 1 ~ "FISHING_HOURS < 1",
        FISHING_HOURS > (7 * 24) ~ "FISHING_HOURS > 1 week"
      )
  ) |>
  arrange(FISHING_HOURS) |>
  select(-TRIP_ID) |>
  count(fishing_hours_cat, year_start, vendor_trip_cat) |> 
  kable(caption = "fishing_hours_cat, year_start, vendor_trip_cat")


```

# Weird TRIP_END_DATE

```{r Weird TRIP_END_DATE}
#| class: my_table

#| class-output: striped
#| tbl-cap: Astronomical object

trip_coord_info_vendors3 |>
  select(TRIP_ID, TRIP_END_DATE, year_start, vendor_trip_cat) |> 
  distinct() |> 
  filter(year(TRIP_END_DATE) < 2021) |> 
  arrange(TRIP_END_DATE) |> 
  select(-TRIP_ID) |> 
  kable(caption = "Weird TRIP_END_DATE")

```

# On land
## Get the US borders
```{r Get the US borders}
us_bb <-
  tigris::counties(filter_by = big_bounding_box, progress_bar = FALSE)
# sf::st_crs(us_bb)
    # ID["EPSG",4269]]

tic("sf::st_union(us_bb)")
us_bb_border <- sf::st_union(us_bb)
toc(log = TRUE, quiet = TRUE)
# sf::st_union(us_bb): 16.58 sec elapsed

us_bb_border_crs <- 
  sf::st_crs(us_bb_border)

# str(us_bb_border)
gg <- ggplot()
gg <- gg + geom_sf(
  data = us_bb_border,
  color = "black",
  fill = "white",
  size = 0.25
)
# gg
```

## get Shapefile all waters
```{r get GOMsf}
path_to_federal_state_w <-
  file.path(my_paths$inputs, 
            r"(shapefiles\federal_and_state_waters\FederalAndStateWaters.shp)")

file.exists(path_to_federal_state_w)
# T

tic("federal_state_w_sf")
federal_state_w_sf <-
  sf::read_sf(path_to_federal_state_w)
toc(log = TRUE, quiet = TRUE)

rr <-
federal_state_w_sf |> 
  sf::st_drop_geometry()

rr$Jurisdicti |> 
  cat(sep = ", ")
east_coat_states <- c(
  "Alabama",
  "Connecticut",
  "Delaware",
  "Florida",
  "Georgia",
  "Louisiana",
  "Maine",
  "Maryland",
  "Massachusetts",
  "Mississippi",
  "New Hampshire",
  "New Jersey",
  "New York",
  "North Carolina",
  "Pennsylvania",
  "Rhode Island",
  "South Carolina",
  "Texas",
  "Virginia",
  "Washington DC"
)
# nc_sql = st_read(system.file("shape/nc.shp", package="sf"),
#                      query = "SELECT NAME, SID74, FIPS FROM \"nc\" WHERE BIR74 > 20000")

# Jurisdicti
# log.txt <- tic.log(format = TRUE)
# 
# writeLines(unlist(log.txt))
# tic.clearlog()

# sf::st_crs(federal_state_w_sf)
  # User input: WGS 84 / World Mercator 
#     ID["EPSG",3395]]

# federal_state_w_sf_east <-
#   federal_state_w_sf |>
#   filter(Jurisdicti %in% east_coat_states)
# 
# mapview(federal_state_w_sf_east)
# [1] 21  7

```

### Make the same crs for us_bb_border and state waters
```{r Make the same crs for us_bb_border and state waters}
# results='hide', message=FALSE, output = FALSE
tic("sf::st_transform state w")
federal_state_w_sf_east_trans <-
  sf::st_transform(federal_state_w_sf_east,
                   crs =
                     us_bb_border_crs) # Match the crs
toc(log = TRUE, quiet = TRUE)

# log.txt <- tic.log(format = TRUE)

# writeLines(unlist(log.txt))
# sf::st_transform state w: 197.39 sec elapsed

# tic.clearlog()

```

```{r Make the same crs for us_bb_border and state waters}
# results='hide', message=FALSE, output = FALSE
tic("sf::st_transform trip_coord_info_crop_big_sf")
trip_coord_info_crop_big_sf_trans <-
  sf::st_transform(trip_coord_info_crop_big_sf,
                   crs =
                     us_bb_border_crs) # Match the crs
toc(log = TRUE, quiet = TRUE)

# log.txt <- tic.log(format = TRUE)
# # 
# writeLines(unlist(log.txt))
# sf::st_transform trip_coord_info_crop_big_sf: 14.42 sec elapsed

# tic.clearlog()

```


### trips and state intersection
```{r not_st_waters}


## get Shapefile GOM
```{r get GOMsf}
path_to_GOMsf <-
  file.path(my_paths$inputs, 
            r"(..\GOM_heatmap_from Kyle\GOM_400fm\GOM_400fm.shp)")

# file.exists(path_to_GOMsf)
# T

tic("read_GOMsf")
GOMsf <-
  sf::read_sf(path_to_GOMsf) %>%
  group_by(StatZone) %>%
  summarise()
toc(log = TRUE, quiet = TRUE)
```

## Get Shapefile SA
```{r get Shapefile SA}
path_to_sa <-
  file.path(my_paths$inputs,
            r"(shapefiles\osa_n_gom\SA_EEZ_off_states.shp)")

# file.exists(path_to_sa)

sa_shp <- sf::read_sf(path_to_sa)
```

```{r}
atl_admn_path <-
  file.path(my_paths$inputs,
            r"(shapefiles\atl_admn\atl_admn.shp)")

# file.exists(atl_admn_path)

atl_admn_shp <- sf::read_sf(atl_admn_path)

mapview(atl_admn_shp)
```

### make the same crs for us_bb_border and GOMsf
```{r make the same crs for us_bb_border and GOMsf}
# results='hide', message=FALSE, output = FALSE
tic("sf::st_transform GOMsf")
GOMsf_1 <-
  sf::st_transform(GOMsf,
                   crs =
                     us_bb_border_crs) # Match the crs
toc(log = TRUE, quiet = TRUE)
# sf::st_transform GOMsf: 46.21 sec elapsed

```

### make the same crs for us_bb_border and sa_shp
```{r make the same crs for us_bb_border and sa_shp}
# results='hide', message=FALSE, output = FALSE
tic("sf::st_transform sa_shp")
sa_shp_1 <-
  sf::st_transform(sa_shp,
                   crs =
                     us_bb_border_crs) # Match the crs
toc(log = TRUE, quiet = TRUE)
log.txt <- tic.log(format = TRUE)

# writeLines(unlist(log.txt))
# tic.clearlog()
```






## Not in SA and GOM
### Exclude gom from us_bb
```{r exclude gom from us_bb}

tic("GOM and us_bb intersection")
gom_st_waters <-
  sf::st_intersection(us_bb_border,
                    GOMsf_1)
toc(log = TRUE, quiet = TRUE)
# GOMsf_1 and us_bb intersection: 1.66 sec elapsed
# log.txt <- tic.log(format = TRUE)
# writeLines(unlist(log.txt))
# tic.clearlog()

gom_st_waters_gg <-
  ggplot() +
  ggplot2::geom_sf(data = not_gom_st_waters,
                   color = "red")

gom_st_waters_gg
# str(not_sa_st_waters)
```

### GOMsf, sa_shp and us_bb difference
```{r GOMsf_1, sa_shp and us_bb difference}
tic("GOMsf_1 and not_sa_st_waters difference")
not_st_waters <-
  sf::st_difference(not_sa_st_waters,
                    GOMsf_1)
toc(log = TRUE, quiet = TRUE)
# GOMsf_1 and not_sa_st_waters difference: 8.36 sec elapsed

# str(not_st_waters)
# sfc_MULTIPOLYGON of length 84; first list element: List of 1160
#  $ :List of 6
#   ..$ : num [1:86930, 1:2] -97.3 -97.3 -97.3 -97.3 -97.4 ...

log.txt <- tic.log(format = TRUE)
# writeLines(unlist(log.txt))
# tic.clearlog()

tic("not_st_waters_gg")
not_st_waters_gg <-
  ggplot() +
  ggplot2::geom_sf(data = not_st_waters,
                   color = "red")
toc(log = TRUE, quiet = TRUE)
```

```{r}

tic("in_land_inters_1")
in_land_inters_1 <-
  trip_coord_info_sf_in_1 |>
  filter(lengths(
    sf::st_intersects(
      trip_coord_info_sf_in_1,
      not_st_waters
    )
  ) > 0)
toc(log = TRUE, quiet = TRUE)
# log.txt <- tic.log(format = TRUE)
# writeLines(unlist(log.txt))
# in_land_inters: 6.92 sec elapsed
# tic.clearlog()

tic()
not_st_waters_gg_points <-
  not_st_waters_gg +
  ggplot2::geom_sf(data = in_land_inters_1,
                   color = "blue")
toc(log = TRUE, quiet = TRUE)
# log.txt <- tic.log(format = TRUE)
# writeLines(unlist(log.txt))
# 20.82 sec elapsed
# tic.clearlog()

not_st_waters_gg_points

```


```{r not in sa and gom}
### not in sa and gom ----

tic("minus_gom")
minus_sa_gom <-
  # trip_coord_info_crop_big_sf |>
  st_filter(minus_sa,
            st_union(in_gom), .predicate = st_disjoint)
toc(log = TRUE, quiet = TRUE)
# minus_gom: 15.84 sec elapsed

mapview(minus_sa_gom) +
  mapview(sa_shp, fill = "lightgreen") +
  mapview(gom_shp, fill = "lightgreen")

 # sf::st_difference(trip_coord_info_crop_big_sf, sa_shp)
# Warning message:
# attribute variables are assumed to be spatially constant throughout all geometries

# sf_use_s2(FALSE)
# Spherical geometry (s2) switched off
#
# minus_gom <- st_difference(corrected_data_sf, gom_shp)

dim(minus_sa)
# [1] 44023    20

# minus_sa_gom <- st_difference(gom_shp, minus_sa)
minus_sa_gom2 <- st_difference(minus_sa, gom_shp)

mm + m_g + m_s
# m_s is still resent?

# A helper function that erases all of y from x: ----
st_erase = function(x, y) st_difference(x, st_union(st_combine(y)))

names(corrected_data) %>% paste0(collapse = ", ")

corrected_data_short_sf <-
  corrected_data %>%
  select(
    TRIP_START_DATE,
    TRIP_END_DATE,
    LATITUDE,
    LONGITUDE,
    MINIMUM_BOTTOM_DEPTH,
    MAXIMUM_BOTTOM_DEPTH,
    FISHING_GEAR_DEPTH
  ) %>%
  st_as_sf(coords = c("LONGITUDE",
                      "LATITUDE"),
           crs = st_crs(sa_shp))

# str(corrected_data_short_sf)
# Classes ‘sf’ and 'data.frame':	11998 obs. of  6 variables:

# st_difference(corrected_data_short_sf,
#               st_union(st_combine(c(gom_shp, sa_shp))))

union_shp <- st_union(gom_shp, sa_shp)
# although coordinates are longitude/latitude, st_union assumes that they are planar
# Warning message:
# attribute variables are assumed to be spatially constant throughout all geometries

plot(union_shp)

# st_difference(corrected_data_short_sf,
#               st_union(st_combine(c(gom_shp, sa_shp))))

corrected_data_short_minus_union_shp <-
  st_difference(corrected_data_short_sf, union_shp)
# although coordinates are longitude/latitude, st_difference
# assumes that they are planar

# write_csv(corrected_data_short_minus_union_shp, "short_minus_sa_gom.csv")

m_minus <- mapview(corrected_data_short_minus_union_shp, color = "green")
# View(corrected_data_short_minus_union_shp)

m_minus + mapview(union_shp)

# minus sa again? ----

all_minus_sa <-
  st_difference(corrected_data_short_minus_union_shp, sa_shp)

write_csv(all_minus_sa, "all_minus_sa.csv")

m_all_minus_sa <-
  mapview(
    all_minus_sa,
    col.regions = "green",
    layer.name = 'Not in GOM or SA',
    alpha = 0.3,
    cex = 1
  )

m_all_minus_sa + union_shp
# ===

# FL ---
# https://catalog.data.gov/dataset/tiger-line-shapefile-2019-state-florida-current-place-state-based/resource/fcf74536-aeab-4ed1-a9df-06daf29a527b

fl_shp <- read_shapefile("tl_2019_12_place_FL/tl_2019_12_place.shp")

st_crs(fl_shp)
    # ID["EPSG",4269]]

on_land <- st_intersection(corrected_data_short_sf, fl_shp)
dim(on_land)
# [1] 3660   22

m_l <- mapview(on_land)
```

## On land polygons and points intersection(incl. state waters)
```{r On land polygons and points intersection}
trip_coord_info_sf_in <-
  trip_coord_info_short_sf |>
  filter(lengths(
    sf::st_intersects(trip_coord_info_short_sf, trip_coord_info_crop_big_sf)
  ) > 0)

tic("sf::st_transform in")
trip_coord_info_sf_in_1 <-
  sf::st_transform(trip_coord_info_sf_in,
                                            crs =                                us_bb_border_crs) # Match the crs
toc(log = TRUE, quiet = TRUE)

# tic("in_land")
# in_sa_gom_diff <-
#   sf::st_difference(trip_coord_info_sf_in_1,
#                     us_bb_border)
# toc(log = TRUE, quiet = TRUE)
# in_land: 520.7 sec elapsed
# 520.7/60 = 8.678333 min

# dim(in_sa_gom_diff)
# [1] 55254     3

# tic("in_land_inters")
# in_land_inters <-
#   sf::st_intersection(trip_coord_info_sf_in_1,
#                     us_bb_border)
# toc(log = TRUE, quiet = TRUE)

tic("in_land_inters")
in_land_inters <-
  trip_coord_info_sf_in_1 |>
  filter(lengths(
    sf::st_intersects(
      trip_coord_info_sf_in_1,
      us_bb_border
    )
  ) > 0)
toc(log = TRUE, quiet = TRUE)
# in_land_inters: 1.2 sec elapsed
# dim(in_land_inters)
# [1] 57110     3

```

```{r On land polygons and points intersection plot}
gg + geom_sf(data = in_land_inters,
             color = "blue")

```

## GOMsf_1 and us_bb intersection
```{r GOMsf_1 and us_bb intersection}
tic("GOMsf_1 and us_bb intersection")
st_waters <-
  sf::st_intersection(us_bb_border,
                      GOMsf_1)
toc(log = TRUE, quiet = TRUE)
# GOMsf_1 and us_bb intersection: 1.66 sec elapsed
log.txt <- tic.log(format = TRUE)
# writeLines(unlist(log.txt))
# tic.clearlog()

```


```{r plot us_bb_border has state water GOMsf}

ggplot() +
  ggplot2::geom_sf(data = st_waters,
                   color = "red")

```


