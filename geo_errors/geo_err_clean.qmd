---
title: "Geo errors"
date: today
project:
  lib-dir: ..
output:
  html_document
execute:
  warning: false
  cache: true
format:
  html:
    toc: true
    toc-depth: 2
    css: style.css
    code-overflow: wrap
    code-fold: true
    code-summary: "Show the code"
    code-line-numbers: true
---

# Setup

```{r no cache setup, results='hide', message=FALSE, warning=FALSE, cache=FALSE}
# setup ----
library(mapview)
library(ggplot2)
library(ggmap)
library(leaflet)

library(rnaturalearth) #coastline
library(knitr)
library(maps)
library(mapdata)

source("~/R_code_github/useful_functions_module.r")
my_paths <- set_work_dir()
current_project_dir_path <- 
  # get_current_file_directory()
  file.path(my_paths$git_r, "geo_errors")

```

# Get data

```{r get data, include=FALSE}
# get data ----
# "C:\Users\anna.shipunova\Documents\R_code_github\get_db_data\get_db_data.R"
source(file.path(my_paths$git_r, r"(get_db_data\get_db_data.R)"))

tic("run_all_get_db_data()")
all_get_db_data_result_l <- run_all_get_db_data()
toc(log = TRUE, quiet = TRUE)
# run_all_get_db_data(): 2.27 sec elapsed (from csv)

trip_coord_info <-
  all_get_db_data_result_l[["trip_coord_info"]] |>
  remove_empty_cols()

world_coast <-
  rnaturalearth::ne_coastline(returnclass = "sf")
# class(world_coast)

```

# Statistics

```{r statistics}
# statistics ----

# dim(trip_coord_info)
# [1] 141350     39

# data_overview(trip_coord_info)

coordInfo_summ <- summary(trip_coord_info) |>
  as.data.frame()

coordInfo_summ_compact <-
  coordInfo_summ |>
  select(-Var1) |>
  tidyr::pivot_wider(names_from = Var2,
              # number of vessels
              values_from = Freq,
              values_fn = list)

# coordInfo_summ_compact$FISHING_HOURS

# str_split_fixed(coordInfo_summ$Freq, " *: *", 2) |> head()

coordInfo_summ1 <-
  coordInfo_summ |>
  tidyr::separate(Freq, c("stat_name", "sta_val"), " *: *",
                  extra = "merge")

# View(coordInfo_summ1)

coordInfo_summ2 <-
  coordInfo_summ1 |>
  dplyr::distinct() |>
  pivot_wider(names_from = stat_name,
              id_cols = Var2,
              values_from = sta_val) |>
  # dplyr::mutate_if(is.character, trimws) |>
  dplyr::mutate(field_name = trimws(Var2),
         .before = 1,
         .keep = "unused")

names(coordInfo_summ2) <- fix_names(names(coordInfo_summ2))

# print_df_names(coordInfo_summ2)

coordInfo_summ2_short <-
  coordInfo_summ2 |>
  filter(is.na(mode)) |>
  select(field_name, min, max, na_s) |>
  dplyr::distinct()

# View(coordInfo_summ2_short)

# coordInfo_summ2_short$field_name |> cat(sep = ", ")
# TRIP_ID, FISHING_HOURS, LATITUDE, LONGITUDE, AVG_DEPTH_IN_FATHOMS, E_DE, E_DC, DEPTH, MINIMUM_BOTTOM_DEPTH, MAXIMUM_BOTTOM_DEPTH, FISHING_GEAR_DEPTH, DAYS_AT_SEA, T_DE, T_DC, VESSEL_ID, CF_PERMIT_ID, TRIP_START_DATE, TRIP_END_DATE, ACTIVITY_TYPE, SERO_VESSEL_PERMIT

weird_stats <-
  coordInfo_summ2_short |>
  filter(field_name %in%
           c("FISHING_HOURS", "LATITUDE", "LONGITUDE", "TRIP_END_DATE"))

head(weird_stats) |> 
    kable(caption = "weird_stats")

#   field_name    min                        max                        na_s
# 1 FISHING_HOURS "0.000  "                  "4920.640  "                NA
# 2 LATITUDE      "-87.30  "                 "90.00  "                  "580  "
# 3 LONGITUDE     "-117.25  "                "137.59  "                 "580  "
# 4 TRIP_END_DATE "1969-08-17 00:00:00.00  " "2023-09-19 00:00:00.00  "  NA

```

# Prepare vendor columns

```{r prepare vendor columns}
# t_UE, E_UE
# trip_coord_info |>
#   filter(!trimws(T_UE) == trimws(E_UE)) |>
#   glimpse()
# Rows: 119,735

trip_coord_info_vendors <-
  trip_coord_info |>
  dplyr::group_by(LATITUDE, LONGITUDE) |>
  # dplyr::mutate(all_permits = toString(unique(TOP))) |>
  dplyr::mutate(vendor_trip = toString(unique(T_UE)),
         vendor_effort = toString(unique(E_UE))) |>
  dplyr::ungroup()

# trip_coord_info_vendors |>
#   select(vendor_trip, vendor_effort) |>
#   dplyr::distinct() |>
#   dim()
# [1] 971   2

trip_coord_info_trip_vendors_cnt <-
  trip_coord_info_vendors |>
  select(vendor_trip) |>
  dplyr::mutate(vendor_trip = trimws(tolower(vendor_trip))) |>
  add_count(vendor_trip) |>
  dplyr::distinct()

# dim(trip_coord_info_trip_vendors_cnt)
# 678

trip_coord_info_trip_vendors_cnt |>
  arrange(desc(n)) |>
  head() |> 
  kable(caption = "trip_coord_info_trip_vendors_cnt")

# vesl	77275			
# vms	15160			
# ray rosher	1032			
# captgreg9982	653		

trip_coord_info_effort_vendors_cnt <-
  trip_coord_info_vendors |>
  select(vendor_effort) |>
  dplyr::mutate(vendor_effort = trimws(tolower(vendor_effort))) |>
  add_count(vendor_effort) |>
  dplyr::distinct()

trip_coord_info_effort_vendors_cnt |>
  arrange(desc(n)) |>
  head() |> 
  kable(caption = "trip_coord_info_effort_vendors_cnt")
# safis	119734			
# vms	15160			
# vesl	1880			
# fishizzle75	283	

#dim [1] 263   2

tic("trip_coord_info_vendors3_trip")
trip_coord_info_vendors3_trip <-
  trip_coord_info |>
  dplyr::group_by(LATITUDE, LONGITUDE) |>
  dplyr::mutate(vendor_trip_cat = case_when(
    trimws(tolower(T_UE)) == "vms" ~ "vms",
    trimws(tolower(T_UE)) %in% c("vesl", "bluefin") ~ "vesl",
    .default = "etrips"
  )) |>
  dplyr::ungroup()
toc(log = TRUE, quiet = TRUE)

compare_trip_and_effort_vendors <-
  function() {
    tic("trip_coord_info_vendors3_trip_eff")
    trip_coord_info_vendors3_trip_eff <-
      trip_coord_info_vendors3_trip |>
      dplyr::mutate(
        vendor_effort_cat = case_when(
          trimws(tolower(E_UE)) == "vms" ~ "vms",
          trimws(tolower(E_UE)) %in% c("vesl", "bluefin") ~ "vesl",
          .default = "etrips"
        )
      ) |>
      dplyr::ungroup()
    toc(log = TRUE, quiet = TRUE)
    # trip_coord_info_vendors3: 160.77 sec elapsed
    # 160.77/60 = 2.6795m
    
    # View(trip_coord_info_vendors3)
    # TODO: check t_UE diff E_UE
    # View(trip_coord_info_vendors)
    
    trip_coord_info_vendors3 |>
      filter(trimws(tolower(E_UE)) == "safis") |>
      filter(!vendor_trip_cat == vendor_effort_cat) |>
      select(T_UE, E_UE, vendor_trip_cat, vendor_effort_cat) |>
      dplyr::mutate(T_UE = trimws(T_UE),
             E_UE = trimws(E_UE)) |>
      dplyr::distinct() |>
      kable(caption = "T_UE diff with E_UE")
  }
#   glimpse()
# VESL	  SAFIS	vesl	etrips	
# Bluefin	SAFIS	vesl	etrips


# run ones:
  # compare_trip_and_effort_vendors()
# Because E_UE has "SAFIS" for both vesl	etrips, I will use T_UE
```

# General comments

```{r general comments}
# errors in geo data ----
# 1) a sign
# 2) on land
# 3) outside boundaries
# 3a) if 28 north - see the wrong long?
# 4) wrong depth
# 5) missing coords
# filter(complete.cases(.)) %>%
# 6) area codes?
# AREA_CODE               91
# SUB_AREA_CODE           56
# DISTANCE_CODE_NAME       5
# LOCAL_AREA_CODE         46

# ===
# fathom, old English measure of length, now standardized at 6 feet (1.83 metre), which has long been used as a nautical unit of depth.

# ===
# LATITUDE      NA's   :1198
# LATITUDE        LONGITUDE
# Min.   :-87.30   Min.   :-117.25
# Max.   : 90.00   Max.   : 137.59

```

# Map functions

```{r map functions}

crs4326 <- 4326
lat_long_to_map <-
  function(my_df, my_title = "my_title", legend = TRUE) {
  my_df %>%
    # save info to show on the map
    dplyr::mutate(point = paste(LATITUDE, LONGITUDE, sep = ", ")) %>%
    # convert to sf
    # an sf object is a collection of simple features that includes attributes and geometries in the form of a data frame.
    sf::st_as_sf(coords = c("LONGITUDE",
                        "LATITUDE"),
                 crs = my_crs) %>%
    mapview::mapview(
      col.regions = viridisLite::turbo,
      layer.name = my_title,
      legend = legend
    ) %>% return()
}

world_coast <-
  rnaturalearth::ne_coastline(returnclass = 'sf')

lat_long_to_map_plot <-
  function(my_df,
           my_title = "my_title",
           coast_map = world_coast,
           label_column = NA) {
    # browser()

    my_crs <- sf::st_crs(coast_map)
    my_df_sf <-
      my_df %>%
      # save info to show on the map
      dplyr::mutate(point = paste(LATITUDE, LONGITUDE, sep = ", ")) %>%
      # convert to sf
      # an sf object is a collection of simple features that includes attributes and geometries in the form of a data frame.
      sf::st_as_sf(coords = c("LONGITUDE",
                              "LATITUDE"),
                   crs = my_crs)

    map_plot <-
      ggplot() +
      ggplot2::geom_sf(data = coast_map) +
      ggplot2::geom_sf(data = my_df_sf,
                       color = "blue") +
      ggplot2::ggtitle(my_title)

    if (!is.na(label_column)) {
      map_plot <-
        map_plot +
        ggplot2::geom_sf_text(data = my_df_sf,
                              aes(label = !!sym(label_column)))
    }

    return(map_plot)

  }

crop_by_shape <-
  function(my_sf, shape) {
    my_sf |>
      sf::st_join(shape, left = FALSE) %>%
      dplyr::mutate(
        LONGITUDE = sf::st_coordinates(.)[, 1],
        LATITUDE = sf::st_coordinates(.)[, 2]
      ) %>%
      return()
  }

big_bounding_box <- c(
   xmin = -97.79954,
   ymin = 21.521757, #Cuba
   xmax = -64.790337, #Bermuda
   ymax = 49 #Canada
 )

red_bounding_box <-
  geom_rect(
    aes(
      xmin = big_bounding_box[["xmin"]],
      xmax = big_bounding_box[["xmax"]],
      ymin = big_bounding_box[["ymin"]],
      ymax = big_bounding_box[["ymax"]]
    ),
    color = "red",
    fill = NA
  )

```

# Map all available points

```{r map all available points}

trip_coord_info_map_data <-
  trip_coord_info |>
  select(LONGITUDE, LATITUDE) |>
  dplyr::distinct() |>
  dplyr::filter(!is.na(LONGITUDE) | !is.na(LATITUDE)) |>
  dplyr::mutate(label_lat_lon = paste(round(LATITUDE, 0),
                               round(LONGITUDE, 0)))
  # dim()
  # [1] 116246      3

trip_coord_info_plot <-
  lat_long_to_map_plot(trip_coord_info_map_data,
                       my_title = "All coordinates")
trip_coord_info_plot
```

# Count vendors

```{r count vendors}
trip_coord_info_vendors3 <-
  trip_coord_info_vendors3_trip |> 
  dplyr::mutate(year_start = year(TRIP_START_DATE))

trip_coord_info_vendors3 |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  count(vendor_trip_cat) |> 
  kable(caption = "ALL: count(vendor_trip_cat)")


trip_coord_info_vendors3 |> 
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  count(vendor_trip_cat, year_start) |> 
  kable(caption = "ALL: count(vendor_trip_cat, year_start)")

# all vendors
# etrips	47731			
# vesl	77352			
# vms	16267		
```

# Sign errors

## Positive longitude

```{r Sign}
# 1) a sign ----
## positive_long ----
positive_long <-
  trip_coord_info_vendors3 %>%
  filter(LONGITUDE > 0)

# dim(positive_long)
# [1] 15418    41

#     LATITUDE        LONGITUDE
# Min.   :-87.30   Min.   :-117.25
# 1st Qu.: 26.10   1st Qu.: -83.57
# Median : 29.00   Median : -81.01
# Mean   : 28.88   Mean   : -50.88
# 3rd Qu.: 30.16   3rd Qu.: -75.85
# Max.   : 90.00   Max.   : 137.59
# NA's   :1277     NA's   :1277

positive_long_map <-
  positive_long |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  lat_long_to_map_plot(my_title = 'Positive longitude')

# label_column = "vendor_trip_cat"

positive_long_map
```

## Positive longitude, corrected
```{r Positive longitude, corrected}
positive_long_corrected_map <-
  positive_long |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  dplyr::mutate(LONGITUDE = -abs(LONGITUDE)) |> 
  lat_long_to_map_plot(my_title = 'Positive longitude, corrected')

# label_column = "vendor_trip_cat"

positive_long_corrected_map +
  red_bounding_box

```

### Positive longitude table

```{r positive longitude table}
positive_long |>
    select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  count(vendor_trip_cat) |>
  dplyr::distinct() |> 
  kable(caption = "positive_long: vendor_trip_cat")

# count vendor_trip_cat
# etrips	89			
# vesl	15329		

# count(vendor_trip_cat, year_start)
positive_long |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  count(vendor_trip_cat, year_start) |>
  dplyr::distinct() |> 
  kable(caption = "positive_long: count(vendor_trip_cat, year_start)")
```


```{r positive longitude VESL only}
positive_longitude_report <- function() {
  
  positive_long_vesl <-
    trip_coord_info_vendors3 |>
    filter(LONGITUDE > 0) |>
    filter(vendor_trip_cat == "vesl")
  
  positive_long_vesl_map <-
    positive_long_vesl |>
    select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
    dplyr::distinct() |>
    lat_long_to_map_plot(my_title = 'Positive longitude (VESL)')
  
  ggsave("positive_long_vesl_map.png",
    plot = positive_long_vesl_map)
  
  write_csv(positive_long_vesl, "positive_long_vesl.csv")
}

# positive_longitude_report()
```

## Negative latitude

```{r negative latitude}
### negative latitude ----
negative_lat <-
  trip_coord_info_vendors3 %>%
  filter(LATITUDE <= 0)

# dim(negative_lat)
# 120

negative_lat %>%
  select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
  count(vendor_trip_cat) |>
  dplyr::distinct() |> 
  kable(caption = "negative_lat: count(vendor_trip_cat)")
# etrips	2			
# vesl	26		

negative_lat %>%
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  count(vendor_trip_cat, year_start) |>
  dplyr::distinct() |> 
  kable(caption = "negative_lat: count(vendor_trip_cat, year_start)")


# dim(negative_lat)
# [1] 28 41

# negative_lat %>% count(LATITUDE, LONGITUDE)
# LATITUDE LONGITUDE  n
# 1 -87.30000  29.30000  2
# 2 -83.97695  29.15705 11
# 3 -76.76466  55.33196  3
# 4 -41.40274 -14.40965  2
# 5 -30.00000  86.00000 93
# 6 -27.85917 137.58650  4
# 7   0.00000   0.00000  5
```

### Negative latitude mapped

```{r Negative latitude mapped}

negative_lat_c_subset <-
  negative_lat %>%
  select(LATITUDE, LONGITUDE)

neg_lat_map <-
  lat_long_to_map_plot(negative_lat_c_subset, 'Negative latitude')

neg_lat_map

```

```{r negative latitude fixed mapped}
negative_lat_fixed <-
  negative_lat |> 
  select(LATITUDE, LONGITUDE) |> 
  dplyr::mutate(LATITUDE = abs(LATITUDE),
         LONGITUDE = -abs(LONGITUDE))

neg_lat_pos_long_fixed_map <-
  lat_long_to_map_plot(negative_lat_fixed, 'Negative latitude,  fixed') +
  red_bounding_box

neg_lat_pos_long_fixed_map

```

# Outside boundaries

```{r outside boundaries}
## 3) outside boundaries ----

trip_coord_info_vendors3_short <-
  trip_coord_info_vendors3 |>
  select(LATITUDE, LONGITUDE, vendor_trip_cat, year_start) |>
  dplyr::distinct() |>
  dplyr::filter(!is.na(LONGITUDE) | !is.na(LATITUDE))

my_crs <- sf::st_crs(world_coast)
trip_coord_info_short_sf <-
  trip_coord_info_vendors3_short |>
  sf::st_as_sf(coords = c("LONGITUDE",
                          "LATITUDE"),
               crs = my_crs)

# dim(trip_coord_info_short_sf)
# [1] 116246      1
# [1] 116251      2 w vendor_trip_cat
# [1] 117259      3

trip_coord_info_crop_big_sf <-
  sf::st_crop(trip_coord_info_short_sf,
              big_bounding_box)

# dim(trip_coord_info_crop_big_sf)
# [1] 111572      1
# [1] 111576      2

trip_coord_info_sf_out <-
  trip_coord_info_short_sf |>
  filter(lengths(
    sf::st_intersects(trip_coord_info_short_sf, trip_coord_info_crop_big_sf)
  ) == 0)

# dim(trip_coord_info_crop_big_sf)
# [1] 111572      1
# [1] 111576      2 with vendor

# dim(trip_coord_info_sf_out)
# [1] 4674    1
# [1] 4675    2 with vendor

# str(trip_coord_info_sf_out)

out_of_boxmap_plot <-
  ggplot() +
  ggplot2::geom_sf(data = world_coast) +
  ggplot2::geom_sf(data = trip_coord_info_sf_out,
                       color = "blue") +
  red_bounding_box +
  ggplot2::ggtitle("Points outside of the big box")

out_of_boxmap_plot

# str(out_of_boxmap_plot)
# rectangular_big_box_view <- mapview::viewExtent(trip_coord_info_crop_big_sf)
#
# mapview::mapview(trip_coord_info_sf_out) +
#   rectangular_big_box_view

```

## Out of box table

```{r Out of box table}
trip_coord_info_sf_out |>
  sf::st_drop_geometry() |>
  count(vendor_trip_cat, year_start) |> 
  kable(caption = "Out of box: count(vendor_trip_cat, year_start)")

# etrips	151			
# vesl	4524		

# negative_lat %>%
#   select(LATITUDE, LONGITUDE, vendor_trip_cat) |>
#   count(vendor_trip_cat) |>
#   dplyr::distinct()

```

# Weird FISHING_HOURS

```{r Weird FISHING_HOURS}
trip_coord_info_vendors3 |>
  select(TRIP_ID, FISHING_HOURS, year_start, vendor_trip_cat) |>
  dplyr::distinct() |>
  dplyr::filter((FISHING_HOURS < 1) | (FISHING_HOURS > (7 * 24))) |>
  dplyr::mutate(
    fishing_hours_cat =
      case_when(
        FISHING_HOURS < 1 ~ "FISHING_HOURS < 1",
        FISHING_HOURS > (7 * 24) ~ "FISHING_HOURS > 1 week"
      )
  ) |>
  arrange(FISHING_HOURS) |>
  select(-TRIP_ID) |>
  count(fishing_hours_cat, year_start, vendor_trip_cat) |> 
  kable(caption = "fishing_hours_cat, year_start, vendor_trip_cat")


```

# Weird TRIP_END_DATE

```{r Weird TRIP_END_DATE}
#| class: my_table

#| class-output: striped
#| tbl-cap: Astronomical object

trip_coord_info_vendors3 |>
  select(TRIP_ID, TRIP_END_DATE, year_start, vendor_trip_cat) |> 
  dplyr::distinct() |> 
  filter(year(TRIP_END_DATE) < 2021) |> 
  arrange(TRIP_END_DATE) |> 
  select(-TRIP_ID) |> 
  kable(caption = "Weird TRIP_END_DATE")

```

# On land

## get land map
```{r get land map}
# get land map ----
land_shp_f_path <- file.path(my_paths$inputs,
                             r"(shapefiles\ne_10m_land\ne_10m_land.shp)")


ne_10m_land_sf <-
  sf::read_sf(land_shp_f_path)

# sf::st_geometry(ne_10m_land_sf)
# Geodetic CRS:  WGS 84
# Geometry type: MULTIPOLYGON

ne_10m_land_sf_bb <-
  sf::st_crop(ne_10m_land_sf,
              big_bounding_box)
# plot(ne_10m_land_sf_bb)

```

## land map intersection with points
```{r land map intersection with points}
trip_coord_info_map_data_sf <-
  trip_coord_info_map_data |>
  sf::st_as_sf(coords = c("LONGITUDE",
                          "LATITUDE"),
               crs = my_crs)

trip_coord_info_map_data_sf_inland <-
  trip_coord_info_map_data_sf |>
  filter(lengths(
    sf::st_intersects(trip_coord_info_map_data_sf,
                      ne_10m_land_sf_bb)
  ) > 0)

# tic("trip_coord_info_map_data_sf_inland")
# trip_coord_info_map_data_sf_inters <-
#   sf::st_intersection(trip_coord_info_map_data_sf, usa_sf)
# toc()

dim(trip_coord_info_map_data_sf_inland)
# [1] 10169     2 map us
# [1] 17040     2 land


# str(trip_coord_info_map_data_sf_inland)
```

## Points on land map
```{r plot intersection with points}
      ggplot() +
      ggplot2::geom_sf(data = ne_10m_land_sf_bb) +
      ggplot2::geom_sf(data = trip_coord_info_map_data_sf_inland,
                       color = "blue") +
      ggplot2::ggtitle("Points on land inside the bog box")

  

```
