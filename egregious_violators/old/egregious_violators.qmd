---
title: "Egregious violators"
subtitle:  "'Egregious' means no reports in the last 6 months, and at least 2 attempted contacts (2 calls or a call and an email, but at least 1 call)"
date: today
project:
  lib-dir: ..
format:
  html:
    toc: true
    # toc-depth: 2
    css: styles.css
    code-overflow: wrap
    # code-fold: true
    # code-summary: "Show the code"
    code-line-numbers: true
---

```{r no cache setup, include=FALSE}
##| echo: false

# see read.me

# Get common functions
source("~/R_code_github/useful_functions_module.r")
library(zoo)

```

```{r setup, cache=TRUE, include=FALSE}
##| echo: false
my_paths <- set_work_dir()
current_project_name <- "egregious_violators"
current_project_path <-
  file.path(my_paths$git_r, current_project_name)

source(file.path(current_project_path, "get_data.R"))

```

# Preparing compliance info
## Add permit_expired column
```{r Add permit_expired column }
compl_clean_w_permit_exp <-
  compl_clean %>%
  # if permit group expiration is more than a month from the date the data are downloaded from FHIER than "no"
  dplyr::mutate(permit_expired =
           dplyr::case_when(permitgroupexpiration > (data_file_date + 30) ~ "no",
                     .default = "yes"))

```

## dplyr::filter the last ~ 6 month 
```{r dplyr::filter the last 6 month }

# Variables for numbers
number_of_weeks_for_non_compliancy = 27
days_in_27_weeks <-
  number_of_weeks_for_non_compliancy * 7

half_year_ago <-
  data_file_date - days_in_27_weeks

compl_clean_w_permit_exp_last_27w <-
  compl_clean_w_permit_exp |>
  # add a column
  dplyr::mutate(year_month = zoo::as.yearmon(week_start)) |>
  # keep entries for the last n weeks
  dplyr::filter(year_month >= zoo::as.yearmon(half_year_ago))

```

## Have only SA permits, exclude those with Gulf permits
```{r Have only SA permits, exclude those with Gulf permits }
compl_clean_sa <-
  compl_clean_w_permit_exp_last_27w |>
  dplyr::filter(!grepl("RCG|HRCG|CHG|HCHG", permitgroup))

```

## dplyr::filter for egregious
### Check if there is no "compliant_ == YES" since half_year_ago 
```{r 'Check if there is no "compliant_ == YES" since half_year_ago' }

# A variable for the last week
# We will disregard it, bc reports could be delayed
last_week_start <- data_file_date - 6

compl_clean_sa_non_c_not_exp <-
  compl_clean_sa |>
  # not compliant
  dplyr::filter(tolower(compliant_) == "no") |>
  # in the last 27 week
  dplyr::filter(week_start > half_year_ago) |>
  # before the last week (a report's grace period)
  dplyr::filter(week_start < last_week_start) |>
  # not expired
  dplyr::filter(tolower(permit_expired) == "no")

# All permitted weeks were non compliant
compl_clean_sa_all_weeks_non_c_short <-
  compl_clean_sa_non_c_not_exp |>
  dplyr::select(vessel_official_number, week, compliant_) |>
  dplyr::add_count(vessel_official_number,
                   name = "total_weeks") |>
  dplyr::add_count(vessel_official_number, compliant_,
                   name = "compl_weeks_amnt") |>
  # sort
  dplyr::arrange(dplyr::desc(compl_weeks_amnt),
                 vessel_official_number) |>
  # remove the column
  dplyr::select(-week) |>
  dplyr::distinct() |>
  # all weeks were non compliant
  dplyr::filter(compl_weeks_amnt == total_weeks) |>
  # permitted for the whole period (disregard the last week)
  dplyr::filter(total_weeks == (number_of_weeks_for_non_compliancy - 1))

```

### Add back columns needed for the output
```{r Add back columns needed for the output }

need_cols_names <- c(
  "vessel_official_number",
  "name",
  "permit_expired",
  "permitgroup",
  "permitgroupexpiration"
)

compl_clean_sa_all_weeks_non_c <-
  compl_clean_sa_non_c_not_exp |>
  dplyr::select(dplyr::all_of(need_cols_names)) |>
  dplyr::inner_join(compl_clean_sa_all_weeks_non_c_short) |>
  # Default Joining with `by = join_by(vessel_official_number)`
  dplyr::distinct()

```
# Preparing Correspondence

## Remove 999999
```{r remove 999999 }
corresp_contact_cnts_clean <-
  corresp_contact_cnts_clean0 |>
  dplyr::filter(!grepl("^99999", vessel_official_number))

data_overview(corresp_contact_cnts_clean)
# vessel_official_number  3371

```

## Direct_contact

### 1) all are voicemails
```{r 1) all are voicemails }
get_all_voicemails_id <- function(corresp_contact_cnts_clean) {
  corresp_contact_cnts_clean |>
    dplyr::group_by(vessel_official_number) |>
    # add a new logical column all_vm with a TRUE if all entries for voicemail column for this vessel are yeses
    dplyr::reframe(all_vm = all(tolower(voicemail) == "yes")) |>
    # keep a row only if all_vm == TRUE
    dplyr::filter(all_vm) |>
    # keep only one column
    dplyr::select("vessel_official_number") |>
    dplyr::distinct() %>%
    return()
}

all_vm_ids <- get_all_voicemails_id(corresp_contact_cnts_clean)
str(all_vm_ids)
# 134

# field_name into a var as a symbol
contactcomments_field_name <-
  rlang::sym(find_col_name(corresp_contact_cnts_clean,
                    ".*contact", "comments.*")[1])

add_a_direct_contact_column <-
  function(corresp_contact_cnts_clean) {
    corresp_contact_cnts_clean |>
      # create a new column "direct_contact" with a "yes" or "no"
      # search comments for indicators that there was no direct contact
      dplyr::mutate(
        direct_contact = dplyr::case_when(
          grepl("no answer", !!contactcomments_field_name,
                ignore.case = TRUE) ~ "no",
          grepl("wrong number", !!contactcomments_field_name,
                ignore.case = TRUE) ~ "no",
          grepl("not in service", !!contactcomments_field_name,
                ignore.case = TRUE) ~ "no",
          grepl("number.+is incorrect",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          grepl("the incorrect number",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          grepl("incorrect phone number",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          grepl("call could not be completed as dialed",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          vessel_official_number %in%
            all_vm_ids$vessel_official_number ~ "no",
          .default = "yes"
        )
      ) %>%
      return()
  }

corresp_contact_cnts_clean_direct_cnt <-
  add_a_direct_contact_column(corresp_contact_cnts_clean)
glimpse(corresp_contact_cnts_clean_direct_cnt)

```

## Add a dplyr::filter: If there was 1 call or 2 emails (out and in, bc they got the email, we shared the information and received a confirmation) with a direct communication

### 1) 1 call with a direct communication
```{r 1) 1 call with a direct communication }
get_calls_with_direct_communication <-
  function(corresp_contact_cnts_clean_direct_cnt) {
    # save the long dplyr::filter
    # more than one call
    answered_1_plus_filter <- rlang::quo(
      contact_freq > 1 &
        tolower(contacttype) == "call" &
        direct_contact == "yes" &
        tolower(voicemail) ==  "no"
    )
    
    # use the dplyr::filter
    corresp_contact_cnts_clean_direct_cnt |>
      dplyr::filter(!!answered_1_plus_filter) %>%
      return()
  }

calls_with_direct_communication <-
  get_calls_with_direct_communication(corresp_contact_cnts_clean_direct_cnt)

str(calls_with_direct_communication)

```

### 2) in and out emails
```{r 2) in and out emails }
get_both_in_n_out_emails <- function(corresp_contact_cnts_clean) {
  # save a dplyr::filter: more than 1 email
  emails_filter <- rlang::quo(contact_freq > 1 &
                         ((tolower(contacttype) == "email") |
                            (tolower(contacttype) == "other")))

  # use emails_filter for incoming
  incoming_2_plus_emails <-
    corresp_contact_cnts_clean |>
    dplyr::filter(!!emails_filter &
             tolower(calltype) == "incoming") |>
    dplyr::select(vessel_official_number) |>
    dplyr::distinct()

  # use emails_filter for outgoing
  outgoing_2_plus_emails <-
    corresp_contact_cnts_clean |>
    dplyr::filter(!!emails_filter &
             tolower(calltype) == "outgoing") |>
    dplyr::select(vessel_official_number) |>
    dplyr::distinct()

  # get ids which are in both in and out lists
  both_in_n_out_2_plus_email_ids <-
    intersect(incoming_2_plus_emails, outgoing_2_plus_emails)

  # keep correspondence information only for those
  corresp_contact_cnts_clean_direct_cnt |>
    dplyr::filter(
      vessel_official_number %in%
        both_in_n_out_2_plus_email_ids$vessel_official_number
    ) %>%
    return()
}

both_in_n_out_2_plus_emails <-
  get_both_in_n_out_emails(corresp_contact_cnts_clean)

# check
data_overview(corresp_contact_cnts_clean) |> head(1)
# vessel_official_number 3371

# data_overview(both_in_n_out_2_plus_emails)  |> head(1)
```

## Combine dplyr::filtered correspondence
```{r Combine dplyr::filtered correspondence }
to_investigation_to_NEIS <-
  rbind(both_in_n_out_2_plus_emails,
        calls_with_direct_communication)

```

#### Look at the correspondence result (to_investigation_to_NEIS)
```{r Look at the correspondence result (to_investigation_to_NEIS) }
data_overview(to_investigation_to_NEIS) |> head(1)
# vesselofficial_number 3034

dim(to_investigation_to_NEIS)
# [1] 14463    23

str(to_investigation_to_NEIS)

```

# Combine compliance information with dplyr::filtered correspondence info by vessel_official_number
```{r Combine compliance information with dplyr::filtered correspondence info by vessel_official_number }

compl_corr_to_investigation <-
  dplyr::inner_join(
    to_investigation_to_NEIS,
    compl_clean_sa_all_weeks_non_c,
    by = c("vessel_official_number"),
    multiple = "all",
    relationship = "many-to-many"
  )

dim(compl_corr_to_investigation)
# [1] 264  30

## check
count_uniq_by_column(compl_corr_to_investigation) |> head(1)
# vesselofficial_number 105

```

# Output needed investigation

1) create additional columns
2) combine output
3) remove duplicated columns
4) remove vessels already in the know list

## 1) create additional columns

### List of contact dates and contact type in parentheses 
```{r list of contact dates and contact type in parentheses  }

# put names into variables, in case they are different
contactdate_field_name <-
  find_col_name(compl_corr_to_investigation, "contact", "date")[1]
contacttype_field_name <-
  find_col_name(compl_corr_to_investigation, "contact", "type")[1]

get_date_contacttype <-
  function(compl_corr_to_investigation) {
    compl_corr_to_investigation |>
      # add a new column date__contacttype with contactdate and contacttype
      dplyr::mutate(date__contacttype =
                      paste(contactdate_field_name, contacttype, sep = " ")) |>
      # use 2 columns only
      dplyr::select(vessel_official_number, date__contacttype) |>
      # sort
      dplyr::arrange(vessel_official_number, date__contacttype) |>
      dplyr::distinct() |>
      dplyr::group_by(vessel_official_number) |>
      # for each vessel id combine all date__contacttypes separated by comma in one cell
      dplyr::summarise(date__contacttypes =
                         paste(date__contacttype, collapse = ", ")) %>%
      return()
  }

date__contacttype_per_id <-
  get_date_contacttype(compl_corr_to_investigation)

dim(date__contacttype_per_id)
# 105   2

```

## 2) Combine output
```{r 2) Combine output }
compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id <-
  compl_corr_to_investigation |>
  dplyr::inner_join(date__contacttype_per_id,
             by = "vessel_official_number")

dim(compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id)
# [1] 264  31

```

## 3) remove duplicated columns
```{r 3) remove duplicated columns }

contactphonenumber_field_name <-
  find_col_name(compl_corr_to_investigation, ".*contact", "number.*")[1]

compl_corr_to_investigation_short <-
  compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id |>
  dplyr::select(
    "vessel_official_number",
    "name",
    "permit_expired",
    "permitgroup",
    "permitgroupexpiration",
    "contactrecipientname",
    !!contactphonenumber_field_name,
    "contactemailaddress",
    "date__contacttypes"
  ) |>
  combine_rows_based_on_multiple_columns_and_keep_all_unique_values("vessel_official_number")

dim(compl_corr_to_investigation_short)
# [1] 105   9

str(compl_corr_to_investigation_short)

```

## 3) mark vessels already in the know list
From Omar:
The first column (report created) indicates the vessels that we have created a case for. My advice would be not to exclude those vessels. EOs may have provided compliance assistance and/or warnings already. If that is the case and they continue to be non-compliant after that, they will want to know and we may need to reopen those cases.

### Data from the previous tab of "egregious violators for investigation"
```{r Data from the previous tab of "egregious violators for investigation" }

previous_egr_data_path <-
  file.path(
    my_paths$outputs, current_project_name,
    r"(from_web\egregious violators for investigation - 04-05-2023 27 weeks.csv)"
  )

# file.exists(previous_egr_data_path)
# T

vessels_to_mark <-
  readr::read_csv(previous_egr_data_path)

# data_overview(vessels_to_remove)

vessels_to_mark_ids <-
  vessels_to_mark |>
  dplyr::filter(tolower(`Contacted 2x?`) == 'yes') |>
  dplyr::select(vessel_official_number)
```

#### Mark these vessels
```{r Mark these vessels }
compl_corr_to_investigation_short_dup_marked <-
  compl_corr_to_investigation_short |>
  dplyr::mutate(
    duplicate_w_last_time =
      dplyr::case_when(
        vessel_official_number %in%
          vessels_to_mark_ids$vessel_official_number ~ "duplicate",
        .default = "new"
      )
  )

dim(compl_corr_to_investigation_short_dup_marked)
# [1] 105  10
```

### Remove some if there is a list
```{r Remove some if there is a list }

vessels_to_remove <-
  read.csv(file.path(my_paths$inputs, r"(egr_violators\vessels_to_remove_04_05_2023.csv)"))
names(vessels_to_remove) = "vessel_official_number"
dim(vessels_to_remove)
# 58

compl_corr_to_investigation_short2 <-
  compl_corr_to_investigation_short_dup_marked |>
  dplyr::filter(!(
    vessel_official_number %in%
      vessels_to_remove$vessel_official_number
  ))
# 164

#### check ----

# Has to use 'unique', no applicable method for 'distinct' applied to an object of class "character"
length(unique(compl_corr_to_investigation_short_dup_marked$vessel_official_number))
# 105

data_overview(compl_corr_to_investigation_short_dup_marked) |> head(1)
# vessel_official_number 105

glimpse(compl_corr_to_investigation_short_dup_marked)
```

## Output to CSV
```{r Output to CSV }

result_file_path <- file.path(
  my_paths$outputs,
  current_project_name,
  paste0(
    "egregious_violators_for_investigation_from_",
    half_year_ago,
    "_to_",
    data_file_date,
    ".csv"
  ))
  
readr::write_csv(
  compl_corr_to_investigation_short_dup_marked,
  result_file_path,
  na = "")

```

# Who needs an email
```{r who needs an email }
source(file.path(current_project_path, "need_an_email.R"))

```

