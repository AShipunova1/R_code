---
title: "Egregious violators"
subtitle:  "'Egregious' means no reports in the last 6 months, and at least 2 attempted contacts (2 calls or a call and an email, but at least 1 call)"
date: today
project:
  lib-dir: ..
format:
  html:
    toc: true
    # toc-depth: 2
    css: styles.css
    code-overflow: wrap
    # code-fold: true
    # code-summary: "Show the code"
    code-line-numbers: true
---

```{r no cache setup, include=FALSE}
##| echo: false

# see read.me

# Get common functions
source("~/R_code_github/useful_functions_module.r")

library(zoo)
my_paths <- set_work_dir()

```

```{r setup, cache=TRUE, include=FALSE}
##| echo: false
current_project_path <-
  file.path(my_paths$git_r, "egregious_violators")

source(file.path(current_project_path, "get_data.R"))

```

# Preparing compliance info
```{r Preparing compliance info }

```
## Add permit_expired column
```{r add permit_expired column }
compl_clean_w_permit_exp <-
  compl_clean %>%
  # if permit group expiration is more than a month from data_file_date than "no"
  mutate(permit_expired =
           case_when(permitgroupexpiration > (data_file_date + 30) ~ "no",
                     .default = "yes"))

```

## dplyr::filter the last 6 month
```{r add year_month column }
# half_year_ago <- 
#   floor_date(data_file_date, "month") - months(6)

days_in_27_weeks <- 27*7
half_year_ago <- 
  data_file_date - days_in_27_weeks

compl_clean_w_permit_exp_last_27w <-
  compl_clean_w_permit_exp %>%
  mutate(year_month = as.yearmon(week_start)) %>%
  # keep entries for the last 28 weeks
  dplyr::filter(year_month >= as.yearmon(half_year_ago))

```

## Have only SA permits, exclude those with Gulf permits
```{r Have only SA permits, exclude those with Gulf permits }
compl_clean_sa <- 
  compl_clean_w_permit_exp_last_27w %>%
  dplyr::filter(!grepl("RCG|HRCG|CHG|HCHG", permitgroup))

```

## dplyr::filter for non compliant, use all compliance data
```{r dplyr::filter for non compliant, use all compliance data }

# Look at "compliant_" only
compl_clean_sa_non_compl <-
  compl_clean_sa %>%
  dplyr::filter(compliant_ == 'NO')

compl_clean_sa_non_compl %>%
  count_uniq_by_column() %>% head(1)
# vessel_official_number 1369

```

## Get only those with n+ weeks of non compliance
```{r get only those with n+ weeks of non compliance }
# number_of_weeks_for_non_compliancy = 51
number_of_weeks_for_non_compliancy = 26
get_num_of_non_compliant_weeks <-
  function(compl_clean_sa_non_compl) {
    # browser()
    compl_clean_sa_non_compl %>%
      # use only 2 columns
      select(vessel_official_number, week) %>%
      # sort
      arrange(vessel_official_number, week) %>%
      distinct() %>%
      # add a column with counts
      count(vessel_official_number) %>%
      # save an intermediate result for checking
      {. ->> temp_n_compl_cnts } %>% 
      # keep only with count > number_of_weeks_for_non_compliancy
      dplyr::filter(n > number_of_weeks_for_non_compliancy) %>%
      return()
  }

# View(compl_clean_sa_non_compl)

id_n_plus_weeks <-
  get_num_of_non_compliant_weeks(compl_clean_sa_non_compl)

temp_n_compl_cnts %>%
  arrange(desc(n)) %>%
  glimpse()

glimpse(id_n_plus_weeks)
# 'data.frame':	156 obs. of  2 variables

# All weeks in the last 6 m are "non-compliance" ----
compl_clean_sa_all_weeks_cnt <- 
  compl_clean_sa %>% 
  select(vessel_official_number, week, compliant_) %>% 
  add_count(vessel_official_number,
            name = "total_weeks") %>%
  add_count(vessel_official_number, compliant_,
            name = "compl_weeks_amnt")

compl_clean_sa_all_weeks_cnt %>%
  select(-week) %>% 
  dplyr::distinct() %>% 
  dplyr::filter(compl_weeks_amnt >= number_of_weeks_for_non_compliancy) %>%
  dplyr::filter(compliant_ == 'NO') %>%
  arrange(desc(compl_weeks_amnt), vessel_official_number) %>% 
  glimpse()

```

## Get compliance information for only vessels which have more than n non compliant weeks
```{r Get compliance information for only vessels which have more than n non compliant weeks }
compl_w_non_compliant_weeks <-
  compl_clean_sa_non_compl %>%
  dplyr::filter(vessel_official_number %in% id_n_plus_weeks$vessel_official_number)

```
```{r Check vesselofficialnumbers for "all weeks are non-compliant" }
compliant_field_name <-
  as.name(find_col_name(compl_clean_sa, ".*comp", "liant.*")[1])

get_all_weeks_not_compliance_id <- function(compl_clean_sa) {
  compl_clean_sa %>%
    group_by(vessel_official_number) %>%
    reframe(all_weeks_non_compl = all(tolower(!!sym(
      compliant_field_name
    )) == "no")) %>%
    # leave only those with all weeks are non compliant
    dplyr::filter(all_weeks_non_compl) %>%
    select(vessel_official_number) %>%
    unique() %>%
    return()
}
all_weeks_not_compliance_id <-
  get_all_weeks_not_compliance_id(compl_clean_sa)
# str(all_weeks_not_compliance_id)

# all weeks are non compliant
intersect(
  id_n_plus_weeks$vessel_official_number,
  all_weeks_not_compliance_id$vessel_official_number
) %>% str()
# 19
# 27: 185
# 42
# 22

# n+ weeks are not compliant, but some other weeks are compliant
setdiff(
  id_n_plus_weeks$vessel_official_number,
  all_weeks_not_compliance_id$vessel_official_number
) %>% str()
# 137
# 27: 392
# 184
# 166
# all weeks are not compliant, but there are fewer than n weeks for 2022-2023
setdiff(
  all_weeks_not_compliance_id$vessel_official_number,
  id_n_plus_weeks$vessel_official_number
) %>%
  {
    . ->> fewer_n_all_non_compl22_23_ids
  } %>% # save into a var
  str()
# 324
# 27: 170
# 159

group_by_arr <-
  c("vessel_official_number",
    as.character(compliant_field_name))

```

# Preparing Correspondence
```{r Preparing Correspondence }

```

## remove 999999
```{r remove 999999 }
corresp_contact_cnts_clean <-
  corresp_contact_cnts_clean0 %>%
  dplyr::filter(!grepl("^99999", vessel_official_number))

data_overview(corresp_contact_cnts_clean)
# vesselofficial_number   3223
# vessel_official_number  3371

```

## Direct_contact
```{r direct_contact }
```

### 1) all are voicemails
```{r 1) all are voicemails }
get_all_voicemails_id <- function(corresp_contact_cnts_clean) {
  corresp_contact_cnts_clean %>%
    group_by(vessel_official_number) %>%
    # add a new logical column all_vm with a TRUE if all entries for voicemail column for this vessel are yeses
    reframe(all_vm = all(tolower(voicemail) == "yes")) %>%
    # keep a row only if all_vm == TRUE
    dplyr::filter(all_vm) %>%
    # keep only one column
    select("vessel_official_number") %>%
    unique() %>%
    return()
}

all_vm_ids <- get_all_voicemails_id(corresp_contact_cnts_clean)
str(all_vm_ids)

# field_name into a var
contactcomments_field_name <-
  sym(find_col_name(corresp_contact_cnts_clean, ".*contact", "comments.*")[1])
```

### Create a new column "direct_contact" with a "yes" or "no"
```{r create a new column "direct_contact" with a "yes" or "no" }
add_a_direct_contact_column <-
  function(corresp_contact_cnts_clean) {
    corresp_contact_cnts_clean %>%
      # create a new column "direct_contact" with a "yes" or "no"
      # search comments for indicators that there was no direct contact
      mutate(
        direct_contact = case_when(
          grepl("no answer", !!contactcomments_field_name, ignore.case = TRUE) ~ "no",
          grepl("wrong number", !!contactcomments_field_name, ignore.case = TRUE) ~ "no",
          grepl("not in service", !!contactcomments_field_name, ignore.case = TRUE) ~ "no",
          grepl(
            "number.+is incorrect",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          grepl(
            "the incorrect number",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          grepl(
            "incorrect phone number",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          grepl(
            "call could not be completed as dialed",
            !!contactcomments_field_name,
            ignore.case = TRUE
          ) ~ "no",
          vessel_official_number %in% all_vm_ids$vessel_official_number ~ "no",
          .default = "yes"
        )
      ) %>%
      return()
  }

corresp_contact_cnts_clean_direct_cnt <-
  add_a_direct_contact_column(corresp_contact_cnts_clean)
# glimpse(corresp_contact_cnts_clean_direct_cnt)

```

## Add a call dplyr::filter
```{r Add a dplyr::filter: If there was 1 call or 2 emails (out and in, bc they got the email, we shared the information and received a confirmation) with a direct communication. }

```

### 1) 1 call with a direct communication
```{r 1) 1 call with a direct communication }
get_calls_with_direct_communication <-
  function(corresp_contact_cnts_clean_direct_cnt) {
    # save the long dplyr::filter
    # more than one call
    answered_1_plus_filter <- quo(
      contact_freq > 0 &
        tolower(contacttype) == "call" &
        direct_contact == "yes" &
        tolower(voicemail) ==  "no"
    )
    # use the dplyr::filter
    corresp_contact_cnts_clean_direct_cnt %>%
      dplyr::filter(!!answered_1_plus_filter) %>%
      return()
  }
calls_with_direct_communication <-
  get_calls_with_direct_communication(corresp_contact_cnts_clean_direct_cnt)


```
### 2) in and out emails
```{r 2) in and out emails }
get_both_in_n_out_emails <- function(corresp_contact_cnts_clean) {
  # save a dplyr::filter: more than 1 email
  emails_filter <- quo(contact_freq > 1 &
                         ((tolower(contacttype) == "email") |
                            (tolower(contacttype) == "other")))
  
  # use emails_filter for incoming
  incoming_2_plus_emails <-
    corresp_contact_cnts_clean %>%
    dplyr::filter(!!emails_filter &
             tolower(calltype) == "incoming") %>%
    select(vessel_official_number) %>%
    unique()
  # 259
  
  # use emails_filter for outgoing
  outgoing_2_plus_emails <-
    corresp_contact_cnts_clean %>%
    dplyr::filter(!!emails_filter &
             tolower(calltype) == "outgoing") %>%
    select(vessel_official_number) %>%
    unique()

  # get ids wihch are in both in and out lists
  both_in_n_out_2_plus_email_ids <-
    intersect(incoming_2_plus_emails, outgoing_2_plus_emails)
  # 148
  # 173
  
  # keep correspondence information only for those
  corresp_contact_cnts_clean_direct_cnt %>%
    dplyr::filter(
      vessel_official_number %in% both_in_n_out_2_plus_email_ids$vessel_official_number
    ) %>%
    return()
}

both_in_n_out_2_plus_emails <-
  get_both_in_n_out_emails(corresp_contact_cnts_clean)


```
## To investigation to NEIS
```{r to_investigation_to_NEIS }

to_investigation_to_NEIS <-
  rbind(both_in_n_out_2_plus_emails,
        calls_with_direct_communication)

```

# Combine compliance information with filtered correspondence info by vessel_official_number
```{r Combine compliance information with filtered correspondence info by vessel_official_number }


inner_join(
    to_investigation_to_NEIS, 
    compl_w_non_compliant_weeks,
    by = c("vessel_official_number"),
    multiple = "all",
    relationship = "many-to-many"
  ) ->
  compl_corr_to_investigation


## check 
### total
count_uniq_by_column(compl_clean_sa_non_compl) %>% head(1)

### egregious
count_uniq_by_column(compl_corr_to_investigation) %>% head(1)

```

## Output needed investigation
```{r output needed investigation }
# 1) create additional columns
# 2) remove duplicated columns
# 3) remove vessels already in the know list

```
## 1) create additional columns
```{r 1) create additional columns }

```

### List of contact dates and contact type in parentheses
```{r list of contact dates and contact type in parentheses  }

# put nammes int vars
contactdate_field_name <-
  find_col_name(compl_corr_to_investigation, "contact", "date")[1]
contacttype_field_name <-
  find_col_name(compl_corr_to_investigation, "contact", "type")[1]

# write.csv(compl_corr_to_investigation, file.path(my_paths$outputs, "more_than_27_compl_corr_to_investigation_22_23__03_27_2023.csv"), row.names = FALSE)
# 435 unique ids

get_date_contacttype <- function(compl_corr_to_investigation) {
  compl_corr_to_investigation %>%
    # add a new column date__contacttype with contactdate and contacttype
    mutate(date__contacttype = paste(contactdate_field_name, contacttype, sep = " ")) %>%
    # use 2 columns only
    select(vessel_official_number, date__contacttype) %>%
    # [1] 49903     2
    # sort
    arrange(vessel_official_number, date__contacttype) %>%
    unique() %>%
    group_by(vessel_official_number) %>%
    # [1] 1125    2
    # for each vessel id combine all date__contacttypes separated by comma in one cell
    summarise(date__contacttypes = paste(date__contacttype, collapse = ", ")) %>%
    # [1] 435   2
    return()
}

date__contacttype_per_id <-
  get_date_contacttype(compl_corr_to_investigation)

```

## Combine output
```{r combine output }
compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id <-
  compl_corr_to_investigation %>%
  inner_join(date__contacttype_per_id,
             by = "vessel_official_number")

# str(compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id)

```

## 2) remove duplicated columns
```{r 2) remove duplicated columns }

contactphonenumber_field_name <-
  find_col_name(compl_corr_to_investigation, ".*contact", "number.*")[1]

# names(compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id)
compl_corr_to_investigation_w_non_compliant_weeks_n_date__contacttype_per_id %>%
  select(
    "vessel_official_number",
    "name",
    "permit_expired",
    "permitgroup",
    "permitgroupexpiration",
    "contactrecipientname",
    !!contactphonenumber_field_name,
    "contactemailaddress",
    "week_start",
    "date__contacttypes",
    "permit_expired"
  ) %>%
  combine_rows_based_on_multiple_columns_and_keep_all_unique_values("vessel_official_number") ->
  compl_corr_to_investigation_short

glimpse(compl_corr_to_investigation_short)

```

### 3) remove vessels already in the know list
```{r 3) remove vessels already in the know list }
# 
# Omar Rodriguez - NOAA Affiliate <omar.rodriguez@noaa.gov>
# Tue, Apr 4, 12:10PM
# 
# The first column (report created) indicates the vessels that we have created a case for. My advice would be not to exclude those vessels. EOs may have provided compliance assistance and/or warnings already. If that is the case and they continue to be non-compliant after that, they will want to know and we may need to reopen those cases. 

vessels_to_remove <-
  read.csv(file.path(my_paths$inputs, r"(egr_violators\vessels_to_remove_04_05_2023.csv)"))
names(vessels_to_remove) = "vessel_official_number"
str(vessels_to_remove)
# 58
# remove these vessels
compl_corr_to_investigation_short1 <-
  compl_corr_to_investigation_short %>%
  filter(!(
    vessel_official_number %in%
      vessels_to_remove$vessel_official_number
  ))

## check
compl_corr_to_investigation_short_output <-
compl_corr_to_investigation_short1 %>%
  filter(permit_expired == "no")

glimpse(compl_corr_to_investigation_short_output)
```

### Check compl_corr_to_investigation_short_output non compliant weeks number
```{r Check compl_corr_to_investigation_short_output non compliant weeks number }
# test compl_corr_to_investigation_short_output non compliant weeks number ----
week_start_1 <-
  compl_corr_to_investigation_short_output %>%
  select(week_start) %>%
  # count commas
  mutate(week_amount = str_count(week_start, ",") + 1) %>%
  filter(week_amount < 27)
  
dim(week_start_1)[[1]] == 0
# TRUE

# output ----
write.csv(compl_corr_to_investigation_short_output, file.path(my_paths$outputs, "egregious_violators_for_investigation_27_plus_weeks_06_22_2023.csv"), row.names = FALSE)

```

